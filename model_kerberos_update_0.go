/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// KerberosUpdate0 struct for KerberosUpdate0
type KerberosUpdate0 struct {
	AppdefaultsAux *string `json:"appdefaults_aux,omitempty"`
	LibdefaultsAux *string `json:"libdefaults_aux,omitempty"`
}

// NewKerberosUpdate0 instantiates a new KerberosUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberosUpdate0() *KerberosUpdate0 {
	this := KerberosUpdate0{}
	return &this
}

// NewKerberosUpdate0WithDefaults instantiates a new KerberosUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberosUpdate0WithDefaults() *KerberosUpdate0 {
	this := KerberosUpdate0{}
	return &this
}

// GetAppdefaultsAux returns the AppdefaultsAux field value if set, zero value otherwise.
func (o *KerberosUpdate0) GetAppdefaultsAux() string {
	if o == nil || o.AppdefaultsAux == nil {
		var ret string
		return ret
	}
	return *o.AppdefaultsAux
}

// GetAppdefaultsAuxOk returns a tuple with the AppdefaultsAux field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosUpdate0) GetAppdefaultsAuxOk() (*string, bool) {
	if o == nil || o.AppdefaultsAux == nil {
		return nil, false
	}
	return o.AppdefaultsAux, true
}

// HasAppdefaultsAux returns a boolean if a field has been set.
func (o *KerberosUpdate0) HasAppdefaultsAux() bool {
	if o != nil && o.AppdefaultsAux != nil {
		return true
	}

	return false
}

// SetAppdefaultsAux gets a reference to the given string and assigns it to the AppdefaultsAux field.
func (o *KerberosUpdate0) SetAppdefaultsAux(v string) {
	o.AppdefaultsAux = &v
}

// GetLibdefaultsAux returns the LibdefaultsAux field value if set, zero value otherwise.
func (o *KerberosUpdate0) GetLibdefaultsAux() string {
	if o == nil || o.LibdefaultsAux == nil {
		var ret string
		return ret
	}
	return *o.LibdefaultsAux
}

// GetLibdefaultsAuxOk returns a tuple with the LibdefaultsAux field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosUpdate0) GetLibdefaultsAuxOk() (*string, bool) {
	if o == nil || o.LibdefaultsAux == nil {
		return nil, false
	}
	return o.LibdefaultsAux, true
}

// HasLibdefaultsAux returns a boolean if a field has been set.
func (o *KerberosUpdate0) HasLibdefaultsAux() bool {
	if o != nil && o.LibdefaultsAux != nil {
		return true
	}

	return false
}

// SetLibdefaultsAux gets a reference to the given string and assigns it to the LibdefaultsAux field.
func (o *KerberosUpdate0) SetLibdefaultsAux(v string) {
	o.LibdefaultsAux = &v
}

func (o KerberosUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppdefaultsAux != nil {
		toSerialize["appdefaults_aux"] = o.AppdefaultsAux
	}
	if o.LibdefaultsAux != nil {
		toSerialize["libdefaults_aux"] = o.LibdefaultsAux
	}
	return json.Marshal(toSerialize)
}

type NullableKerberosUpdate0 struct {
	value *KerberosUpdate0
	isSet bool
}

func (v NullableKerberosUpdate0) Get() *KerberosUpdate0 {
	return v.value
}

func (v *NullableKerberosUpdate0) Set(val *KerberosUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberosUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberosUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberosUpdate0(val *KerberosUpdate0) *NullableKerberosUpdate0 {
	return &NullableKerberosUpdate0{value: val, isSet: true}
}

func (v NullableKerberosUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberosUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

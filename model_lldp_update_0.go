/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// LldpUpdate0 struct for LldpUpdate0
type LldpUpdate0 struct {
	Intdesc  *bool   `json:"intdesc,omitempty"`
	Country  *string `json:"country,omitempty"`
	Location *string `json:"location,omitempty"`
}

// NewLldpUpdate0 instantiates a new LldpUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLldpUpdate0() *LldpUpdate0 {
	this := LldpUpdate0{}
	return &this
}

// NewLldpUpdate0WithDefaults instantiates a new LldpUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLldpUpdate0WithDefaults() *LldpUpdate0 {
	this := LldpUpdate0{}
	return &this
}

// GetIntdesc returns the Intdesc field value if set, zero value otherwise.
func (o *LldpUpdate0) GetIntdesc() bool {
	if o == nil || o.Intdesc == nil {
		var ret bool
		return ret
	}
	return *o.Intdesc
}

// GetIntdescOk returns a tuple with the Intdesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LldpUpdate0) GetIntdescOk() (*bool, bool) {
	if o == nil || o.Intdesc == nil {
		return nil, false
	}
	return o.Intdesc, true
}

// HasIntdesc returns a boolean if a field has been set.
func (o *LldpUpdate0) HasIntdesc() bool {
	if o != nil && o.Intdesc != nil {
		return true
	}

	return false
}

// SetIntdesc gets a reference to the given bool and assigns it to the Intdesc field.
func (o *LldpUpdate0) SetIntdesc(v bool) {
	o.Intdesc = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *LldpUpdate0) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LldpUpdate0) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *LldpUpdate0) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *LldpUpdate0) SetCountry(v string) {
	o.Country = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *LldpUpdate0) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LldpUpdate0) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *LldpUpdate0) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *LldpUpdate0) SetLocation(v string) {
	o.Location = &v
}

func (o LldpUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Intdesc != nil {
		toSerialize["intdesc"] = o.Intdesc
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableLldpUpdate0 struct {
	value *LldpUpdate0
	isSet bool
}

func (v NullableLldpUpdate0) Get() *LldpUpdate0 {
	return v.value
}

func (v *NullableLldpUpdate0) Set(val *LldpUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableLldpUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableLldpUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLldpUpdate0(val *LldpUpdate0) *NullableLldpUpdate0 {
	return &NullableLldpUpdate0{value: val, isSet: true}
}

func (v NullableLldpUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLldpUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

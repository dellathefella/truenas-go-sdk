/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// DiskGetEncrypted0 struct for DiskGetEncrypted0
type DiskGetEncrypted0 struct {
	Unused *bool `json:"unused,omitempty"`
}

// NewDiskGetEncrypted0 instantiates a new DiskGetEncrypted0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskGetEncrypted0() *DiskGetEncrypted0 {
	this := DiskGetEncrypted0{}
	return &this
}

// NewDiskGetEncrypted0WithDefaults instantiates a new DiskGetEncrypted0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskGetEncrypted0WithDefaults() *DiskGetEncrypted0 {
	this := DiskGetEncrypted0{}
	return &this
}

// GetUnused returns the Unused field value if set, zero value otherwise.
func (o *DiskGetEncrypted0) GetUnused() bool {
	if o == nil || o.Unused == nil {
		var ret bool
		return ret
	}
	return *o.Unused
}

// GetUnusedOk returns a tuple with the Unused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskGetEncrypted0) GetUnusedOk() (*bool, bool) {
	if o == nil || o.Unused == nil {
		return nil, false
	}
	return o.Unused, true
}

// HasUnused returns a boolean if a field has been set.
func (o *DiskGetEncrypted0) HasUnused() bool {
	if o != nil && o.Unused != nil {
		return true
	}

	return false
}

// SetUnused gets a reference to the given bool and assigns it to the Unused field.
func (o *DiskGetEncrypted0) SetUnused(v bool) {
	o.Unused = &v
}

func (o DiskGetEncrypted0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unused != nil {
		toSerialize["unused"] = o.Unused
	}
	return json.Marshal(toSerialize)
}

type NullableDiskGetEncrypted0 struct {
	value *DiskGetEncrypted0
	isSet bool
}

func (v NullableDiskGetEncrypted0) Get() *DiskGetEncrypted0 {
	return v.value
}

func (v *NullableDiskGetEncrypted0) Set(val *DiskGetEncrypted0) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskGetEncrypted0) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskGetEncrypted0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskGetEncrypted0(val *DiskGetEncrypted0) *NullableDiskGetEncrypted0 {
	return &NullableDiskGetEncrypted0{value: val, isSet: true}
}

func (v NullableDiskGetEncrypted0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskGetEncrypted0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

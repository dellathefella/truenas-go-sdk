/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PoolScrubRun struct for PoolScrubRun
type PoolScrubRun struct {
	Name                 *string `json:"name,omitempty"`
	Threshold            *int32  `json:"threshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PoolScrubRun PoolScrubRun

// NewPoolScrubRun instantiates a new PoolScrubRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolScrubRun() *PoolScrubRun {
	this := PoolScrubRun{}
	var threshold int32 = 35
	this.Threshold = &threshold
	return &this
}

// NewPoolScrubRunWithDefaults instantiates a new PoolScrubRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolScrubRunWithDefaults() *PoolScrubRun {
	this := PoolScrubRun{}
	var threshold int32 = 35
	this.Threshold = &threshold
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PoolScrubRun) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolScrubRun) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PoolScrubRun) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PoolScrubRun) SetName(v string) {
	o.Name = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *PoolScrubRun) GetThreshold() int32 {
	if o == nil || o.Threshold == nil {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolScrubRun) GetThresholdOk() (*int32, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *PoolScrubRun) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *PoolScrubRun) SetThreshold(v int32) {
	o.Threshold = &v
}

func (o PoolScrubRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PoolScrubRun) UnmarshalJSON(bytes []byte) (err error) {
	varPoolScrubRun := _PoolScrubRun{}

	if err = json.Unmarshal(bytes, &varPoolScrubRun); err == nil {
		*o = PoolScrubRun(varPoolScrubRun)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "threshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoolScrubRun struct {
	value *PoolScrubRun
	isSet bool
}

func (v NullablePoolScrubRun) Get() *PoolScrubRun {
	return v.value
}

func (v *NullablePoolScrubRun) Set(val *PoolScrubRun) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolScrubRun) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolScrubRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolScrubRun(val *PoolScrubRun) *NullablePoolScrubRun {
	return &NullablePoolScrubRun{value: val, isSet: true}
}

func (v NullablePoolScrubRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolScrubRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

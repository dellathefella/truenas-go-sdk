/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PoolPassphrase1 struct for PoolPassphrase1
type PoolPassphrase1 struct {
	Passphrase    NullableString `json:"passphrase,omitempty"`
	AdminPassword *string        `json:"admin_password,omitempty"`
}

// NewPoolPassphrase1 instantiates a new PoolPassphrase1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolPassphrase1() *PoolPassphrase1 {
	this := PoolPassphrase1{}
	return &this
}

// NewPoolPassphrase1WithDefaults instantiates a new PoolPassphrase1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolPassphrase1WithDefaults() *PoolPassphrase1 {
	this := PoolPassphrase1{}
	return &this
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PoolPassphrase1) GetPassphrase() string {
	if o == nil || o.Passphrase.Get() == nil {
		var ret string
		return ret
	}
	return *o.Passphrase.Get()
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PoolPassphrase1) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passphrase.Get(), o.Passphrase.IsSet()
}

// HasPassphrase returns a boolean if a field has been set.
func (o *PoolPassphrase1) HasPassphrase() bool {
	if o != nil && o.Passphrase.IsSet() {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given NullableString and assigns it to the Passphrase field.
func (o *PoolPassphrase1) SetPassphrase(v string) {
	o.Passphrase.Set(&v)
}

// SetPassphraseNil sets the value for Passphrase to be an explicit nil
func (o *PoolPassphrase1) SetPassphraseNil() {
	o.Passphrase.Set(nil)
}

// UnsetPassphrase ensures that no value is present for Passphrase, not even an explicit nil
func (o *PoolPassphrase1) UnsetPassphrase() {
	o.Passphrase.Unset()
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *PoolPassphrase1) GetAdminPassword() string {
	if o == nil || o.AdminPassword == nil {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolPassphrase1) GetAdminPasswordOk() (*string, bool) {
	if o == nil || o.AdminPassword == nil {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *PoolPassphrase1) HasAdminPassword() bool {
	if o != nil && o.AdminPassword != nil {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *PoolPassphrase1) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

func (o PoolPassphrase1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Passphrase.IsSet() {
		toSerialize["passphrase"] = o.Passphrase.Get()
	}
	if o.AdminPassword != nil {
		toSerialize["admin_password"] = o.AdminPassword
	}
	return json.Marshal(toSerialize)
}

type NullablePoolPassphrase1 struct {
	value *PoolPassphrase1
	isSet bool
}

func (v NullablePoolPassphrase1) Get() *PoolPassphrase1 {
	return v.value
}

func (v *NullablePoolPassphrase1) Set(val *PoolPassphrase1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolPassphrase1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolPassphrase1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolPassphrase1(val *PoolPassphrase1) *NullablePoolPassphrase1 {
	return &NullablePoolPassphrase1{value: val, isSet: true}
}

func (v NullablePoolPassphrase1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolPassphrase1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// KerberosRealmUpdate1 struct for KerberosRealmUpdate1
type KerberosRealmUpdate1 struct {
	Realm         *string       `json:"realm,omitempty"`
	Kdc           []interface{} `json:"kdc,omitempty"`
	AdminServer   []interface{} `json:"admin_server,omitempty"`
	KpasswdServer []interface{} `json:"kpasswd_server,omitempty"`
}

// NewKerberosRealmUpdate1 instantiates a new KerberosRealmUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberosRealmUpdate1() *KerberosRealmUpdate1 {
	this := KerberosRealmUpdate1{}
	return &this
}

// NewKerberosRealmUpdate1WithDefaults instantiates a new KerberosRealmUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberosRealmUpdate1WithDefaults() *KerberosRealmUpdate1 {
	this := KerberosRealmUpdate1{}
	return &this
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *KerberosRealmUpdate1) GetRealm() string {
	if o == nil || o.Realm == nil {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosRealmUpdate1) GetRealmOk() (*string, bool) {
	if o == nil || o.Realm == nil {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *KerberosRealmUpdate1) HasRealm() bool {
	if o != nil && o.Realm != nil {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *KerberosRealmUpdate1) SetRealm(v string) {
	o.Realm = &v
}

// GetKdc returns the Kdc field value if set, zero value otherwise.
func (o *KerberosRealmUpdate1) GetKdc() []interface{} {
	if o == nil || o.Kdc == nil {
		var ret []interface{}
		return ret
	}
	return o.Kdc
}

// GetKdcOk returns a tuple with the Kdc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosRealmUpdate1) GetKdcOk() ([]interface{}, bool) {
	if o == nil || o.Kdc == nil {
		return nil, false
	}
	return o.Kdc, true
}

// HasKdc returns a boolean if a field has been set.
func (o *KerberosRealmUpdate1) HasKdc() bool {
	if o != nil && o.Kdc != nil {
		return true
	}

	return false
}

// SetKdc gets a reference to the given []interface{} and assigns it to the Kdc field.
func (o *KerberosRealmUpdate1) SetKdc(v []interface{}) {
	o.Kdc = v
}

// GetAdminServer returns the AdminServer field value if set, zero value otherwise.
func (o *KerberosRealmUpdate1) GetAdminServer() []interface{} {
	if o == nil || o.AdminServer == nil {
		var ret []interface{}
		return ret
	}
	return o.AdminServer
}

// GetAdminServerOk returns a tuple with the AdminServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosRealmUpdate1) GetAdminServerOk() ([]interface{}, bool) {
	if o == nil || o.AdminServer == nil {
		return nil, false
	}
	return o.AdminServer, true
}

// HasAdminServer returns a boolean if a field has been set.
func (o *KerberosRealmUpdate1) HasAdminServer() bool {
	if o != nil && o.AdminServer != nil {
		return true
	}

	return false
}

// SetAdminServer gets a reference to the given []interface{} and assigns it to the AdminServer field.
func (o *KerberosRealmUpdate1) SetAdminServer(v []interface{}) {
	o.AdminServer = v
}

// GetKpasswdServer returns the KpasswdServer field value if set, zero value otherwise.
func (o *KerberosRealmUpdate1) GetKpasswdServer() []interface{} {
	if o == nil || o.KpasswdServer == nil {
		var ret []interface{}
		return ret
	}
	return o.KpasswdServer
}

// GetKpasswdServerOk returns a tuple with the KpasswdServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosRealmUpdate1) GetKpasswdServerOk() ([]interface{}, bool) {
	if o == nil || o.KpasswdServer == nil {
		return nil, false
	}
	return o.KpasswdServer, true
}

// HasKpasswdServer returns a boolean if a field has been set.
func (o *KerberosRealmUpdate1) HasKpasswdServer() bool {
	if o != nil && o.KpasswdServer != nil {
		return true
	}

	return false
}

// SetKpasswdServer gets a reference to the given []interface{} and assigns it to the KpasswdServer field.
func (o *KerberosRealmUpdate1) SetKpasswdServer(v []interface{}) {
	o.KpasswdServer = v
}

func (o KerberosRealmUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Realm != nil {
		toSerialize["realm"] = o.Realm
	}
	if o.Kdc != nil {
		toSerialize["kdc"] = o.Kdc
	}
	if o.AdminServer != nil {
		toSerialize["admin_server"] = o.AdminServer
	}
	if o.KpasswdServer != nil {
		toSerialize["kpasswd_server"] = o.KpasswdServer
	}
	return json.Marshal(toSerialize)
}

type NullableKerberosRealmUpdate1 struct {
	value *KerberosRealmUpdate1
	isSet bool
}

func (v NullableKerberosRealmUpdate1) Get() *KerberosRealmUpdate1 {
	return v.value
}

func (v *NullableKerberosRealmUpdate1) Set(val *KerberosRealmUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberosRealmUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberosRealmUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberosRealmUpdate1(val *KerberosRealmUpdate1) *NullableKerberosRealmUpdate1 {
	return &NullableKerberosRealmUpdate1{value: val, isSet: true}
}

func (v NullableKerberosRealmUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberosRealmUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

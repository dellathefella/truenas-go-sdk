/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PluginDefaults0 struct for PluginDefaults0
type PluginDefaults0 struct {
	Refresh          *bool          `json:"refresh,omitempty"`
	Plugin           *string        `json:"plugin,omitempty"`
	Branch           NullableString `json:"branch,omitempty"`
	PluginRepository *string        `json:"plugin_repository,omitempty"`
}

// NewPluginDefaults0 instantiates a new PluginDefaults0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginDefaults0() *PluginDefaults0 {
	this := PluginDefaults0{}
	return &this
}

// NewPluginDefaults0WithDefaults instantiates a new PluginDefaults0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginDefaults0WithDefaults() *PluginDefaults0 {
	this := PluginDefaults0{}
	return &this
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *PluginDefaults0) GetRefresh() bool {
	if o == nil || o.Refresh == nil {
		var ret bool
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginDefaults0) GetRefreshOk() (*bool, bool) {
	if o == nil || o.Refresh == nil {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *PluginDefaults0) HasRefresh() bool {
	if o != nil && o.Refresh != nil {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given bool and assigns it to the Refresh field.
func (o *PluginDefaults0) SetRefresh(v bool) {
	o.Refresh = &v
}

// GetPlugin returns the Plugin field value if set, zero value otherwise.
func (o *PluginDefaults0) GetPlugin() string {
	if o == nil || o.Plugin == nil {
		var ret string
		return ret
	}
	return *o.Plugin
}

// GetPluginOk returns a tuple with the Plugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginDefaults0) GetPluginOk() (*string, bool) {
	if o == nil || o.Plugin == nil {
		return nil, false
	}
	return o.Plugin, true
}

// HasPlugin returns a boolean if a field has been set.
func (o *PluginDefaults0) HasPlugin() bool {
	if o != nil && o.Plugin != nil {
		return true
	}

	return false
}

// SetPlugin gets a reference to the given string and assigns it to the Plugin field.
func (o *PluginDefaults0) SetPlugin(v string) {
	o.Plugin = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PluginDefaults0) GetBranch() string {
	if o == nil || o.Branch.Get() == nil {
		var ret string
		return ret
	}
	return *o.Branch.Get()
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluginDefaults0) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branch.Get(), o.Branch.IsSet()
}

// HasBranch returns a boolean if a field has been set.
func (o *PluginDefaults0) HasBranch() bool {
	if o != nil && o.Branch.IsSet() {
		return true
	}

	return false
}

// SetBranch gets a reference to the given NullableString and assigns it to the Branch field.
func (o *PluginDefaults0) SetBranch(v string) {
	o.Branch.Set(&v)
}

// SetBranchNil sets the value for Branch to be an explicit nil
func (o *PluginDefaults0) SetBranchNil() {
	o.Branch.Set(nil)
}

// UnsetBranch ensures that no value is present for Branch, not even an explicit nil
func (o *PluginDefaults0) UnsetBranch() {
	o.Branch.Unset()
}

// GetPluginRepository returns the PluginRepository field value if set, zero value otherwise.
func (o *PluginDefaults0) GetPluginRepository() string {
	if o == nil || o.PluginRepository == nil {
		var ret string
		return ret
	}
	return *o.PluginRepository
}

// GetPluginRepositoryOk returns a tuple with the PluginRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginDefaults0) GetPluginRepositoryOk() (*string, bool) {
	if o == nil || o.PluginRepository == nil {
		return nil, false
	}
	return o.PluginRepository, true
}

// HasPluginRepository returns a boolean if a field has been set.
func (o *PluginDefaults0) HasPluginRepository() bool {
	if o != nil && o.PluginRepository != nil {
		return true
	}

	return false
}

// SetPluginRepository gets a reference to the given string and assigns it to the PluginRepository field.
func (o *PluginDefaults0) SetPluginRepository(v string) {
	o.PluginRepository = &v
}

func (o PluginDefaults0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Refresh != nil {
		toSerialize["refresh"] = o.Refresh
	}
	if o.Plugin != nil {
		toSerialize["plugin"] = o.Plugin
	}
	if o.Branch.IsSet() {
		toSerialize["branch"] = o.Branch.Get()
	}
	if o.PluginRepository != nil {
		toSerialize["plugin_repository"] = o.PluginRepository
	}
	return json.Marshal(toSerialize)
}

type NullablePluginDefaults0 struct {
	value *PluginDefaults0
	isSet bool
}

func (v NullablePluginDefaults0) Get() *PluginDefaults0 {
	return v.value
}

func (v *NullablePluginDefaults0) Set(val *PluginDefaults0) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginDefaults0) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginDefaults0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginDefaults0(val *PluginDefaults0) *NullablePluginDefaults0 {
	return &NullablePluginDefaults0{value: val, isSet: true}
}

func (v NullablePluginDefaults0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginDefaults0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

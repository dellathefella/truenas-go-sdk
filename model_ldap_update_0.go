/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// LdapUpdate0 struct for LdapUpdate0
type LdapUpdate0 struct {
	Hostname             []interface{} `json:"hostname,omitempty"`
	Basedn               *string       `json:"basedn,omitempty"`
	Binddn               *string       `json:"binddn,omitempty"`
	Bindpw               *string       `json:"bindpw,omitempty"`
	Anonbind             *bool         `json:"anonbind,omitempty"`
	Ssl                  *string       `json:"ssl,omitempty"`
	Certificate          NullableInt32 `json:"certificate,omitempty"`
	ValidateCertificates *bool         `json:"validate_certificates,omitempty"`
	DisableFreenasCache  *bool         `json:"disable_freenas_cache,omitempty"`
	Timeout              *int32        `json:"timeout,omitempty"`
	DnsTimeout           *int32        `json:"dns_timeout,omitempty"`
	KerberosRealm        NullableInt32 `json:"kerberos_realm,omitempty"`
	KerberosPrincipal    *string       `json:"kerberos_principal,omitempty"`
	HasSambaSchema       *bool         `json:"has_samba_schema,omitempty"`
	AuxiliaryParameters  *string       `json:"auxiliary_parameters,omitempty"`
	Schema               *string       `json:"schema,omitempty"`
	Enable               *bool         `json:"enable,omitempty"`
}

// NewLdapUpdate0 instantiates a new LdapUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapUpdate0() *LdapUpdate0 {
	this := LdapUpdate0{}
	return &this
}

// NewLdapUpdate0WithDefaults instantiates a new LdapUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapUpdate0WithDefaults() *LdapUpdate0 {
	this := LdapUpdate0{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *LdapUpdate0) GetHostname() []interface{} {
	if o == nil || o.Hostname == nil {
		var ret []interface{}
		return ret
	}
	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetHostnameOk() ([]interface{}, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *LdapUpdate0) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given []interface{} and assigns it to the Hostname field.
func (o *LdapUpdate0) SetHostname(v []interface{}) {
	o.Hostname = v
}

// GetBasedn returns the Basedn field value if set, zero value otherwise.
func (o *LdapUpdate0) GetBasedn() string {
	if o == nil || o.Basedn == nil {
		var ret string
		return ret
	}
	return *o.Basedn
}

// GetBasednOk returns a tuple with the Basedn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetBasednOk() (*string, bool) {
	if o == nil || o.Basedn == nil {
		return nil, false
	}
	return o.Basedn, true
}

// HasBasedn returns a boolean if a field has been set.
func (o *LdapUpdate0) HasBasedn() bool {
	if o != nil && o.Basedn != nil {
		return true
	}

	return false
}

// SetBasedn gets a reference to the given string and assigns it to the Basedn field.
func (o *LdapUpdate0) SetBasedn(v string) {
	o.Basedn = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *LdapUpdate0) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *LdapUpdate0) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *LdapUpdate0) SetBinddn(v string) {
	o.Binddn = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *LdapUpdate0) GetBindpw() string {
	if o == nil || o.Bindpw == nil {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetBindpwOk() (*string, bool) {
	if o == nil || o.Bindpw == nil {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *LdapUpdate0) HasBindpw() bool {
	if o != nil && o.Bindpw != nil {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *LdapUpdate0) SetBindpw(v string) {
	o.Bindpw = &v
}

// GetAnonbind returns the Anonbind field value if set, zero value otherwise.
func (o *LdapUpdate0) GetAnonbind() bool {
	if o == nil || o.Anonbind == nil {
		var ret bool
		return ret
	}
	return *o.Anonbind
}

// GetAnonbindOk returns a tuple with the Anonbind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetAnonbindOk() (*bool, bool) {
	if o == nil || o.Anonbind == nil {
		return nil, false
	}
	return o.Anonbind, true
}

// HasAnonbind returns a boolean if a field has been set.
func (o *LdapUpdate0) HasAnonbind() bool {
	if o != nil && o.Anonbind != nil {
		return true
	}

	return false
}

// SetAnonbind gets a reference to the given bool and assigns it to the Anonbind field.
func (o *LdapUpdate0) SetAnonbind(v bool) {
	o.Anonbind = &v
}

// GetSsl returns the Ssl field value if set, zero value otherwise.
func (o *LdapUpdate0) GetSsl() string {
	if o == nil || o.Ssl == nil {
		var ret string
		return ret
	}
	return *o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetSslOk() (*string, bool) {
	if o == nil || o.Ssl == nil {
		return nil, false
	}
	return o.Ssl, true
}

// HasSsl returns a boolean if a field has been set.
func (o *LdapUpdate0) HasSsl() bool {
	if o != nil && o.Ssl != nil {
		return true
	}

	return false
}

// SetSsl gets a reference to the given string and assigns it to the Ssl field.
func (o *LdapUpdate0) SetSsl(v string) {
	o.Ssl = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapUpdate0) GetCertificate() int32 {
	if o == nil || o.Certificate.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapUpdate0) GetCertificateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *LdapUpdate0) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableInt32 and assigns it to the Certificate field.
func (o *LdapUpdate0) SetCertificate(v int32) {
	o.Certificate.Set(&v)
}

// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *LdapUpdate0) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *LdapUpdate0) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetValidateCertificates returns the ValidateCertificates field value if set, zero value otherwise.
func (o *LdapUpdate0) GetValidateCertificates() bool {
	if o == nil || o.ValidateCertificates == nil {
		var ret bool
		return ret
	}
	return *o.ValidateCertificates
}

// GetValidateCertificatesOk returns a tuple with the ValidateCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetValidateCertificatesOk() (*bool, bool) {
	if o == nil || o.ValidateCertificates == nil {
		return nil, false
	}
	return o.ValidateCertificates, true
}

// HasValidateCertificates returns a boolean if a field has been set.
func (o *LdapUpdate0) HasValidateCertificates() bool {
	if o != nil && o.ValidateCertificates != nil {
		return true
	}

	return false
}

// SetValidateCertificates gets a reference to the given bool and assigns it to the ValidateCertificates field.
func (o *LdapUpdate0) SetValidateCertificates(v bool) {
	o.ValidateCertificates = &v
}

// GetDisableFreenasCache returns the DisableFreenasCache field value if set, zero value otherwise.
func (o *LdapUpdate0) GetDisableFreenasCache() bool {
	if o == nil || o.DisableFreenasCache == nil {
		var ret bool
		return ret
	}
	return *o.DisableFreenasCache
}

// GetDisableFreenasCacheOk returns a tuple with the DisableFreenasCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetDisableFreenasCacheOk() (*bool, bool) {
	if o == nil || o.DisableFreenasCache == nil {
		return nil, false
	}
	return o.DisableFreenasCache, true
}

// HasDisableFreenasCache returns a boolean if a field has been set.
func (o *LdapUpdate0) HasDisableFreenasCache() bool {
	if o != nil && o.DisableFreenasCache != nil {
		return true
	}

	return false
}

// SetDisableFreenasCache gets a reference to the given bool and assigns it to the DisableFreenasCache field.
func (o *LdapUpdate0) SetDisableFreenasCache(v bool) {
	o.DisableFreenasCache = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *LdapUpdate0) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *LdapUpdate0) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *LdapUpdate0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetDnsTimeout returns the DnsTimeout field value if set, zero value otherwise.
func (o *LdapUpdate0) GetDnsTimeout() int32 {
	if o == nil || o.DnsTimeout == nil {
		var ret int32
		return ret
	}
	return *o.DnsTimeout
}

// GetDnsTimeoutOk returns a tuple with the DnsTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetDnsTimeoutOk() (*int32, bool) {
	if o == nil || o.DnsTimeout == nil {
		return nil, false
	}
	return o.DnsTimeout, true
}

// HasDnsTimeout returns a boolean if a field has been set.
func (o *LdapUpdate0) HasDnsTimeout() bool {
	if o != nil && o.DnsTimeout != nil {
		return true
	}

	return false
}

// SetDnsTimeout gets a reference to the given int32 and assigns it to the DnsTimeout field.
func (o *LdapUpdate0) SetDnsTimeout(v int32) {
	o.DnsTimeout = &v
}

// GetKerberosRealm returns the KerberosRealm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapUpdate0) GetKerberosRealm() int32 {
	if o == nil || o.KerberosRealm.Get() == nil {
		var ret int32
		return ret
	}
	return *o.KerberosRealm.Get()
}

// GetKerberosRealmOk returns a tuple with the KerberosRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapUpdate0) GetKerberosRealmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosRealm.Get(), o.KerberosRealm.IsSet()
}

// HasKerberosRealm returns a boolean if a field has been set.
func (o *LdapUpdate0) HasKerberosRealm() bool {
	if o != nil && o.KerberosRealm.IsSet() {
		return true
	}

	return false
}

// SetKerberosRealm gets a reference to the given NullableInt32 and assigns it to the KerberosRealm field.
func (o *LdapUpdate0) SetKerberosRealm(v int32) {
	o.KerberosRealm.Set(&v)
}

// SetKerberosRealmNil sets the value for KerberosRealm to be an explicit nil
func (o *LdapUpdate0) SetKerberosRealmNil() {
	o.KerberosRealm.Set(nil)
}

// UnsetKerberosRealm ensures that no value is present for KerberosRealm, not even an explicit nil
func (o *LdapUpdate0) UnsetKerberosRealm() {
	o.KerberosRealm.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise.
func (o *LdapUpdate0) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil || o.KerberosPrincipal == nil {
		return nil, false
	}
	return o.KerberosPrincipal, true
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *LdapUpdate0) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal != nil {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given string and assigns it to the KerberosPrincipal field.
func (o *LdapUpdate0) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal = &v
}

// GetHasSambaSchema returns the HasSambaSchema field value if set, zero value otherwise.
func (o *LdapUpdate0) GetHasSambaSchema() bool {
	if o == nil || o.HasSambaSchema == nil {
		var ret bool
		return ret
	}
	return *o.HasSambaSchema
}

// GetHasSambaSchemaOk returns a tuple with the HasSambaSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetHasSambaSchemaOk() (*bool, bool) {
	if o == nil || o.HasSambaSchema == nil {
		return nil, false
	}
	return o.HasSambaSchema, true
}

// HasHasSambaSchema returns a boolean if a field has been set.
func (o *LdapUpdate0) HasHasSambaSchema() bool {
	if o != nil && o.HasSambaSchema != nil {
		return true
	}

	return false
}

// SetHasSambaSchema gets a reference to the given bool and assigns it to the HasSambaSchema field.
func (o *LdapUpdate0) SetHasSambaSchema(v bool) {
	o.HasSambaSchema = &v
}

// GetAuxiliaryParameters returns the AuxiliaryParameters field value if set, zero value otherwise.
func (o *LdapUpdate0) GetAuxiliaryParameters() string {
	if o == nil || o.AuxiliaryParameters == nil {
		var ret string
		return ret
	}
	return *o.AuxiliaryParameters
}

// GetAuxiliaryParametersOk returns a tuple with the AuxiliaryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetAuxiliaryParametersOk() (*string, bool) {
	if o == nil || o.AuxiliaryParameters == nil {
		return nil, false
	}
	return o.AuxiliaryParameters, true
}

// HasAuxiliaryParameters returns a boolean if a field has been set.
func (o *LdapUpdate0) HasAuxiliaryParameters() bool {
	if o != nil && o.AuxiliaryParameters != nil {
		return true
	}

	return false
}

// SetAuxiliaryParameters gets a reference to the given string and assigns it to the AuxiliaryParameters field.
func (o *LdapUpdate0) SetAuxiliaryParameters(v string) {
	o.AuxiliaryParameters = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *LdapUpdate0) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *LdapUpdate0) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *LdapUpdate0) SetSchema(v string) {
	o.Schema = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *LdapUpdate0) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUpdate0) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *LdapUpdate0) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *LdapUpdate0) SetEnable(v bool) {
	o.Enable = &v
}

func (o LdapUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Basedn != nil {
		toSerialize["basedn"] = o.Basedn
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	if o.Bindpw != nil {
		toSerialize["bindpw"] = o.Bindpw
	}
	if o.Anonbind != nil {
		toSerialize["anonbind"] = o.Anonbind
	}
	if o.Ssl != nil {
		toSerialize["ssl"] = o.Ssl
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.ValidateCertificates != nil {
		toSerialize["validate_certificates"] = o.ValidateCertificates
	}
	if o.DisableFreenasCache != nil {
		toSerialize["disable_freenas_cache"] = o.DisableFreenasCache
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.DnsTimeout != nil {
		toSerialize["dns_timeout"] = o.DnsTimeout
	}
	if o.KerberosRealm.IsSet() {
		toSerialize["kerberos_realm"] = o.KerberosRealm.Get()
	}
	if o.KerberosPrincipal != nil {
		toSerialize["kerberos_principal"] = o.KerberosPrincipal
	}
	if o.HasSambaSchema != nil {
		toSerialize["has_samba_schema"] = o.HasSambaSchema
	}
	if o.AuxiliaryParameters != nil {
		toSerialize["auxiliary_parameters"] = o.AuxiliaryParameters
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	return json.Marshal(toSerialize)
}

type NullableLdapUpdate0 struct {
	value *LdapUpdate0
	isSet bool
}

func (v NullableLdapUpdate0) Get() *LdapUpdate0 {
	return v.value
}

func (v *NullableLdapUpdate0) Set(val *LdapUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapUpdate0(val *LdapUpdate0) *NullableLdapUpdate0 {
	return &NullableLdapUpdate0{value: val, isSet: true}
}

func (v NullableLdapUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// JailExec struct for JailExec
type JailExec struct {
	Jail *string `json:"jail,omitempty"`
	Command []interface{} `json:"command,omitempty"`
	Options *JailExec2 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JailExec JailExec

// NewJailExec instantiates a new JailExec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailExec() *JailExec {
	this := JailExec{}
	var options JailExec2 = {}
	this.Options = &options
	return &this
}

// NewJailExecWithDefaults instantiates a new JailExec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailExecWithDefaults() *JailExec {
	this := JailExec{}
	var options JailExec2 = {}
	this.Options = &options
	return &this
}

// GetJail returns the Jail field value if set, zero value otherwise.
func (o *JailExec) GetJail() string {
	if o == nil || o.Jail == nil {
		var ret string
		return ret
	}
	return *o.Jail
}

// GetJailOk returns a tuple with the Jail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailExec) GetJailOk() (*string, bool) {
	if o == nil || o.Jail == nil {
		return nil, false
	}
	return o.Jail, true
}

// HasJail returns a boolean if a field has been set.
func (o *JailExec) HasJail() bool {
	if o != nil && o.Jail != nil {
		return true
	}

	return false
}

// SetJail gets a reference to the given string and assigns it to the Jail field.
func (o *JailExec) SetJail(v string) {
	o.Jail = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *JailExec) GetCommand() []interface{} {
	if o == nil || o.Command == nil {
		var ret []interface{}
		return ret
	}
	return o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailExec) GetCommandOk() ([]interface{}, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *JailExec) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given []interface{} and assigns it to the Command field.
func (o *JailExec) SetCommand(v []interface{}) {
	o.Command = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *JailExec) GetOptions() JailExec2 {
	if o == nil || o.Options == nil {
		var ret JailExec2
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailExec) GetOptionsOk() (*JailExec2, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *JailExec) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given JailExec2 and assigns it to the Options field.
func (o *JailExec) SetOptions(v JailExec2) {
	o.Options = &v
}

func (o JailExec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Jail != nil {
		toSerialize["jail"] = o.Jail
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *JailExec) UnmarshalJSON(bytes []byte) (err error) {
	varJailExec := _JailExec{}

	if err = json.Unmarshal(bytes, &varJailExec); err == nil {
		*o = JailExec(varJailExec)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "jail")
		delete(additionalProperties, "command")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJailExec struct {
	value *JailExec
	isSet bool
}

func (v NullableJailExec) Get() *JailExec {
	return v.value
}

func (v *NullableJailExec) Set(val *JailExec) {
	v.value = val
	v.isSet = true
}

func (v NullableJailExec) IsSet() bool {
	return v.isSet
}

func (v *NullableJailExec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailExec(val *JailExec) *NullableJailExec {
	return &NullableJailExec{value: val, isSet: true}
}

func (v NullableJailExec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailExec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// DiskTemperatures struct for DiskTemperatures
type DiskTemperatures struct {
	Names                []string           `json:"names,omitempty"`
	Powermode            *DiskTemperatures1 `json:"powermode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskTemperatures DiskTemperatures

// NewDiskTemperatures instantiates a new DiskTemperatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskTemperatures() *DiskTemperatures {
	this := DiskTemperatures{}
	var powermode DiskTemperatures1 = NEVER
	this.Powermode = &powermode
	return &this
}

// NewDiskTemperaturesWithDefaults instantiates a new DiskTemperatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskTemperaturesWithDefaults() *DiskTemperatures {
	this := DiskTemperatures{}
	var powermode DiskTemperatures1 = NEVER
	this.Powermode = &powermode
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *DiskTemperatures) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatures) GetNamesOk() ([]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *DiskTemperatures) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *DiskTemperatures) SetNames(v []string) {
	o.Names = v
}

// GetPowermode returns the Powermode field value if set, zero value otherwise.
func (o *DiskTemperatures) GetPowermode() DiskTemperatures1 {
	if o == nil || o.Powermode == nil {
		var ret DiskTemperatures1
		return ret
	}
	return *o.Powermode
}

// GetPowermodeOk returns a tuple with the Powermode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatures) GetPowermodeOk() (*DiskTemperatures1, bool) {
	if o == nil || o.Powermode == nil {
		return nil, false
	}
	return o.Powermode, true
}

// HasPowermode returns a boolean if a field has been set.
func (o *DiskTemperatures) HasPowermode() bool {
	if o != nil && o.Powermode != nil {
		return true
	}

	return false
}

// SetPowermode gets a reference to the given DiskTemperatures1 and assigns it to the Powermode field.
func (o *DiskTemperatures) SetPowermode(v DiskTemperatures1) {
	o.Powermode = &v
}

func (o DiskTemperatures) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Powermode != nil {
		toSerialize["powermode"] = o.Powermode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DiskTemperatures) UnmarshalJSON(bytes []byte) (err error) {
	varDiskTemperatures := _DiskTemperatures{}

	if err = json.Unmarshal(bytes, &varDiskTemperatures); err == nil {
		*o = DiskTemperatures(varDiskTemperatures)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "names")
		delete(additionalProperties, "powermode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskTemperatures struct {
	value *DiskTemperatures
	isSet bool
}

func (v NullableDiskTemperatures) Get() *DiskTemperatures {
	return v.value
}

func (v *NullableDiskTemperatures) Set(val *DiskTemperatures) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTemperatures) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTemperatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTemperatures(val *DiskTemperatures) *NullableDiskTemperatures {
	return &NullableDiskTemperatures{value: val, isSet: true}
}

func (v NullableDiskTemperatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTemperatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

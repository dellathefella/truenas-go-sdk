/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// DiskUpdate1 struct for DiskUpdate1
type DiskUpdate1 struct {
	Togglesmart     *bool                 `json:"togglesmart,omitempty"`
	Acousticlevel   *string               `json:"acousticlevel,omitempty"`
	Advpowermgmt    *string               `json:"advpowermgmt,omitempty"`
	Description     *string               `json:"description,omitempty"`
	Hddstandby      *string               `json:"hddstandby,omitempty"`
	HddstandbyForce *bool                 `json:"hddstandby_force,omitempty"`
	Passwd          *string               `json:"passwd,omitempty"`
	Smartoptions    *string               `json:"smartoptions,omitempty"`
	Critical        NullableInt32         `json:"critical,omitempty"`
	Difference      NullableInt32         `json:"difference,omitempty"`
	Informational   NullableInt32         `json:"informational,omitempty"`
	Enclosure       *DiskUpdate1Enclosure `json:"enclosure,omitempty"`
}

// NewDiskUpdate1 instantiates a new DiskUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskUpdate1() *DiskUpdate1 {
	this := DiskUpdate1{}
	return &this
}

// NewDiskUpdate1WithDefaults instantiates a new DiskUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskUpdate1WithDefaults() *DiskUpdate1 {
	this := DiskUpdate1{}
	return &this
}

// GetTogglesmart returns the Togglesmart field value if set, zero value otherwise.
func (o *DiskUpdate1) GetTogglesmart() bool {
	if o == nil || o.Togglesmart == nil {
		var ret bool
		return ret
	}
	return *o.Togglesmart
}

// GetTogglesmartOk returns a tuple with the Togglesmart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetTogglesmartOk() (*bool, bool) {
	if o == nil || o.Togglesmart == nil {
		return nil, false
	}
	return o.Togglesmart, true
}

// HasTogglesmart returns a boolean if a field has been set.
func (o *DiskUpdate1) HasTogglesmart() bool {
	if o != nil && o.Togglesmart != nil {
		return true
	}

	return false
}

// SetTogglesmart gets a reference to the given bool and assigns it to the Togglesmart field.
func (o *DiskUpdate1) SetTogglesmart(v bool) {
	o.Togglesmart = &v
}

// GetAcousticlevel returns the Acousticlevel field value if set, zero value otherwise.
func (o *DiskUpdate1) GetAcousticlevel() string {
	if o == nil || o.Acousticlevel == nil {
		var ret string
		return ret
	}
	return *o.Acousticlevel
}

// GetAcousticlevelOk returns a tuple with the Acousticlevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetAcousticlevelOk() (*string, bool) {
	if o == nil || o.Acousticlevel == nil {
		return nil, false
	}
	return o.Acousticlevel, true
}

// HasAcousticlevel returns a boolean if a field has been set.
func (o *DiskUpdate1) HasAcousticlevel() bool {
	if o != nil && o.Acousticlevel != nil {
		return true
	}

	return false
}

// SetAcousticlevel gets a reference to the given string and assigns it to the Acousticlevel field.
func (o *DiskUpdate1) SetAcousticlevel(v string) {
	o.Acousticlevel = &v
}

// GetAdvpowermgmt returns the Advpowermgmt field value if set, zero value otherwise.
func (o *DiskUpdate1) GetAdvpowermgmt() string {
	if o == nil || o.Advpowermgmt == nil {
		var ret string
		return ret
	}
	return *o.Advpowermgmt
}

// GetAdvpowermgmtOk returns a tuple with the Advpowermgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetAdvpowermgmtOk() (*string, bool) {
	if o == nil || o.Advpowermgmt == nil {
		return nil, false
	}
	return o.Advpowermgmt, true
}

// HasAdvpowermgmt returns a boolean if a field has been set.
func (o *DiskUpdate1) HasAdvpowermgmt() bool {
	if o != nil && o.Advpowermgmt != nil {
		return true
	}

	return false
}

// SetAdvpowermgmt gets a reference to the given string and assigns it to the Advpowermgmt field.
func (o *DiskUpdate1) SetAdvpowermgmt(v string) {
	o.Advpowermgmt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DiskUpdate1) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DiskUpdate1) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DiskUpdate1) SetDescription(v string) {
	o.Description = &v
}

// GetHddstandby returns the Hddstandby field value if set, zero value otherwise.
func (o *DiskUpdate1) GetHddstandby() string {
	if o == nil || o.Hddstandby == nil {
		var ret string
		return ret
	}
	return *o.Hddstandby
}

// GetHddstandbyOk returns a tuple with the Hddstandby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetHddstandbyOk() (*string, bool) {
	if o == nil || o.Hddstandby == nil {
		return nil, false
	}
	return o.Hddstandby, true
}

// HasHddstandby returns a boolean if a field has been set.
func (o *DiskUpdate1) HasHddstandby() bool {
	if o != nil && o.Hddstandby != nil {
		return true
	}

	return false
}

// SetHddstandby gets a reference to the given string and assigns it to the Hddstandby field.
func (o *DiskUpdate1) SetHddstandby(v string) {
	o.Hddstandby = &v
}

// GetHddstandbyForce returns the HddstandbyForce field value if set, zero value otherwise.
func (o *DiskUpdate1) GetHddstandbyForce() bool {
	if o == nil || o.HddstandbyForce == nil {
		var ret bool
		return ret
	}
	return *o.HddstandbyForce
}

// GetHddstandbyForceOk returns a tuple with the HddstandbyForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetHddstandbyForceOk() (*bool, bool) {
	if o == nil || o.HddstandbyForce == nil {
		return nil, false
	}
	return o.HddstandbyForce, true
}

// HasHddstandbyForce returns a boolean if a field has been set.
func (o *DiskUpdate1) HasHddstandbyForce() bool {
	if o != nil && o.HddstandbyForce != nil {
		return true
	}

	return false
}

// SetHddstandbyForce gets a reference to the given bool and assigns it to the HddstandbyForce field.
func (o *DiskUpdate1) SetHddstandbyForce(v bool) {
	o.HddstandbyForce = &v
}

// GetPasswd returns the Passwd field value if set, zero value otherwise.
func (o *DiskUpdate1) GetPasswd() string {
	if o == nil || o.Passwd == nil {
		var ret string
		return ret
	}
	return *o.Passwd
}

// GetPasswdOk returns a tuple with the Passwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetPasswdOk() (*string, bool) {
	if o == nil || o.Passwd == nil {
		return nil, false
	}
	return o.Passwd, true
}

// HasPasswd returns a boolean if a field has been set.
func (o *DiskUpdate1) HasPasswd() bool {
	if o != nil && o.Passwd != nil {
		return true
	}

	return false
}

// SetPasswd gets a reference to the given string and assigns it to the Passwd field.
func (o *DiskUpdate1) SetPasswd(v string) {
	o.Passwd = &v
}

// GetSmartoptions returns the Smartoptions field value if set, zero value otherwise.
func (o *DiskUpdate1) GetSmartoptions() string {
	if o == nil || o.Smartoptions == nil {
		var ret string
		return ret
	}
	return *o.Smartoptions
}

// GetSmartoptionsOk returns a tuple with the Smartoptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetSmartoptionsOk() (*string, bool) {
	if o == nil || o.Smartoptions == nil {
		return nil, false
	}
	return o.Smartoptions, true
}

// HasSmartoptions returns a boolean if a field has been set.
func (o *DiskUpdate1) HasSmartoptions() bool {
	if o != nil && o.Smartoptions != nil {
		return true
	}

	return false
}

// SetSmartoptions gets a reference to the given string and assigns it to the Smartoptions field.
func (o *DiskUpdate1) SetSmartoptions(v string) {
	o.Smartoptions = &v
}

// GetCritical returns the Critical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskUpdate1) GetCritical() int32 {
	if o == nil || o.Critical.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Critical.Get()
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskUpdate1) GetCriticalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Critical.Get(), o.Critical.IsSet()
}

// HasCritical returns a boolean if a field has been set.
func (o *DiskUpdate1) HasCritical() bool {
	if o != nil && o.Critical.IsSet() {
		return true
	}

	return false
}

// SetCritical gets a reference to the given NullableInt32 and assigns it to the Critical field.
func (o *DiskUpdate1) SetCritical(v int32) {
	o.Critical.Set(&v)
}

// SetCriticalNil sets the value for Critical to be an explicit nil
func (o *DiskUpdate1) SetCriticalNil() {
	o.Critical.Set(nil)
}

// UnsetCritical ensures that no value is present for Critical, not even an explicit nil
func (o *DiskUpdate1) UnsetCritical() {
	o.Critical.Unset()
}

// GetDifference returns the Difference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskUpdate1) GetDifference() int32 {
	if o == nil || o.Difference.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Difference.Get()
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskUpdate1) GetDifferenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Difference.Get(), o.Difference.IsSet()
}

// HasDifference returns a boolean if a field has been set.
func (o *DiskUpdate1) HasDifference() bool {
	if o != nil && o.Difference.IsSet() {
		return true
	}

	return false
}

// SetDifference gets a reference to the given NullableInt32 and assigns it to the Difference field.
func (o *DiskUpdate1) SetDifference(v int32) {
	o.Difference.Set(&v)
}

// SetDifferenceNil sets the value for Difference to be an explicit nil
func (o *DiskUpdate1) SetDifferenceNil() {
	o.Difference.Set(nil)
}

// UnsetDifference ensures that no value is present for Difference, not even an explicit nil
func (o *DiskUpdate1) UnsetDifference() {
	o.Difference.Unset()
}

// GetInformational returns the Informational field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskUpdate1) GetInformational() int32 {
	if o == nil || o.Informational.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Informational.Get()
}

// GetInformationalOk returns a tuple with the Informational field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskUpdate1) GetInformationalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Informational.Get(), o.Informational.IsSet()
}

// HasInformational returns a boolean if a field has been set.
func (o *DiskUpdate1) HasInformational() bool {
	if o != nil && o.Informational.IsSet() {
		return true
	}

	return false
}

// SetInformational gets a reference to the given NullableInt32 and assigns it to the Informational field.
func (o *DiskUpdate1) SetInformational(v int32) {
	o.Informational.Set(&v)
}

// SetInformationalNil sets the value for Informational to be an explicit nil
func (o *DiskUpdate1) SetInformationalNil() {
	o.Informational.Set(nil)
}

// UnsetInformational ensures that no value is present for Informational, not even an explicit nil
func (o *DiskUpdate1) UnsetInformational() {
	o.Informational.Unset()
}

// GetEnclosure returns the Enclosure field value if set, zero value otherwise.
func (o *DiskUpdate1) GetEnclosure() DiskUpdate1Enclosure {
	if o == nil || o.Enclosure == nil {
		var ret DiskUpdate1Enclosure
		return ret
	}
	return *o.Enclosure
}

// GetEnclosureOk returns a tuple with the Enclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1) GetEnclosureOk() (*DiskUpdate1Enclosure, bool) {
	if o == nil || o.Enclosure == nil {
		return nil, false
	}
	return o.Enclosure, true
}

// HasEnclosure returns a boolean if a field has been set.
func (o *DiskUpdate1) HasEnclosure() bool {
	if o != nil && o.Enclosure != nil {
		return true
	}

	return false
}

// SetEnclosure gets a reference to the given DiskUpdate1Enclosure and assigns it to the Enclosure field.
func (o *DiskUpdate1) SetEnclosure(v DiskUpdate1Enclosure) {
	o.Enclosure = &v
}

func (o DiskUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Togglesmart != nil {
		toSerialize["togglesmart"] = o.Togglesmart
	}
	if o.Acousticlevel != nil {
		toSerialize["acousticlevel"] = o.Acousticlevel
	}
	if o.Advpowermgmt != nil {
		toSerialize["advpowermgmt"] = o.Advpowermgmt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Hddstandby != nil {
		toSerialize["hddstandby"] = o.Hddstandby
	}
	if o.HddstandbyForce != nil {
		toSerialize["hddstandby_force"] = o.HddstandbyForce
	}
	if o.Passwd != nil {
		toSerialize["passwd"] = o.Passwd
	}
	if o.Smartoptions != nil {
		toSerialize["smartoptions"] = o.Smartoptions
	}
	if o.Critical.IsSet() {
		toSerialize["critical"] = o.Critical.Get()
	}
	if o.Difference.IsSet() {
		toSerialize["difference"] = o.Difference.Get()
	}
	if o.Informational.IsSet() {
		toSerialize["informational"] = o.Informational.Get()
	}
	if o.Enclosure != nil {
		toSerialize["enclosure"] = o.Enclosure
	}
	return json.Marshal(toSerialize)
}

type NullableDiskUpdate1 struct {
	value *DiskUpdate1
	isSet bool
}

func (v NullableDiskUpdate1) Get() *DiskUpdate1 {
	return v.value
}

func (v *NullableDiskUpdate1) Set(val *DiskUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskUpdate1(val *DiskUpdate1) *NullableDiskUpdate1 {
	return &NullableDiskUpdate1{value: val, isSet: true}
}

func (v NullableDiskUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// CertificateCreate0CertExtensionsExtendedKeyUsage struct for CertificateCreate0CertExtensionsExtendedKeyUsage
type CertificateCreate0CertExtensionsExtendedKeyUsage struct {
	Usages            []string `json:"usages,omitempty"`
	Enabled           *bool    `json:"enabled,omitempty"`
	ExtensionCritical *bool    `json:"extension_critical,omitempty"`
}

// NewCertificateCreate0CertExtensionsExtendedKeyUsage instantiates a new CertificateCreate0CertExtensionsExtendedKeyUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateCreate0CertExtensionsExtendedKeyUsage() *CertificateCreate0CertExtensionsExtendedKeyUsage {
	this := CertificateCreate0CertExtensionsExtendedKeyUsage{}
	return &this
}

// NewCertificateCreate0CertExtensionsExtendedKeyUsageWithDefaults instantiates a new CertificateCreate0CertExtensionsExtendedKeyUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateCreate0CertExtensionsExtendedKeyUsageWithDefaults() *CertificateCreate0CertExtensionsExtendedKeyUsage {
	this := CertificateCreate0CertExtensionsExtendedKeyUsage{}
	return &this
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetUsages() []string {
	if o == nil || o.Usages == nil {
		var ret []string
		return ret
	}
	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetUsagesOk() ([]string, bool) {
	if o == nil || o.Usages == nil {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) HasUsages() bool {
	if o != nil && o.Usages != nil {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []string and assigns it to the Usages field.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) SetUsages(v []string) {
	o.Usages = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExtensionCritical returns the ExtensionCritical field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetExtensionCritical() bool {
	if o == nil || o.ExtensionCritical == nil {
		var ret bool
		return ret
	}
	return *o.ExtensionCritical
}

// GetExtensionCriticalOk returns a tuple with the ExtensionCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) GetExtensionCriticalOk() (*bool, bool) {
	if o == nil || o.ExtensionCritical == nil {
		return nil, false
	}
	return o.ExtensionCritical, true
}

// HasExtensionCritical returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) HasExtensionCritical() bool {
	if o != nil && o.ExtensionCritical != nil {
		return true
	}

	return false
}

// SetExtensionCritical gets a reference to the given bool and assigns it to the ExtensionCritical field.
func (o *CertificateCreate0CertExtensionsExtendedKeyUsage) SetExtensionCritical(v bool) {
	o.ExtensionCritical = &v
}

func (o CertificateCreate0CertExtensionsExtendedKeyUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Usages != nil {
		toSerialize["usages"] = o.Usages
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ExtensionCritical != nil {
		toSerialize["extension_critical"] = o.ExtensionCritical
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateCreate0CertExtensionsExtendedKeyUsage struct {
	value *CertificateCreate0CertExtensionsExtendedKeyUsage
	isSet bool
}

func (v NullableCertificateCreate0CertExtensionsExtendedKeyUsage) Get() *CertificateCreate0CertExtensionsExtendedKeyUsage {
	return v.value
}

func (v *NullableCertificateCreate0CertExtensionsExtendedKeyUsage) Set(val *CertificateCreate0CertExtensionsExtendedKeyUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateCreate0CertExtensionsExtendedKeyUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateCreate0CertExtensionsExtendedKeyUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateCreate0CertExtensionsExtendedKeyUsage(val *CertificateCreate0CertExtensionsExtendedKeyUsage) *NullableCertificateCreate0CertExtensionsExtendedKeyUsage {
	return &NullableCertificateCreate0CertExtensionsExtendedKeyUsage{value: val, isSet: true}
}

func (v NullableCertificateCreate0CertExtensionsExtendedKeyUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateCreate0CertExtensionsExtendedKeyUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

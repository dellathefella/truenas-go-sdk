/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// JailFstab struct for JailFstab
type JailFstab struct {
	Jail *string `json:"jail,omitempty"`
	Options *JailFstab1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JailFstab JailFstab

// NewJailFstab instantiates a new JailFstab object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailFstab() *JailFstab {
	this := JailFstab{}
	var options JailFstab1 = {}
	this.Options = &options
	return &this
}

// NewJailFstabWithDefaults instantiates a new JailFstab object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailFstabWithDefaults() *JailFstab {
	this := JailFstab{}
	var options JailFstab1 = {}
	this.Options = &options
	return &this
}

// GetJail returns the Jail field value if set, zero value otherwise.
func (o *JailFstab) GetJail() string {
	if o == nil || o.Jail == nil {
		var ret string
		return ret
	}
	return *o.Jail
}

// GetJailOk returns a tuple with the Jail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFstab) GetJailOk() (*string, bool) {
	if o == nil || o.Jail == nil {
		return nil, false
	}
	return o.Jail, true
}

// HasJail returns a boolean if a field has been set.
func (o *JailFstab) HasJail() bool {
	if o != nil && o.Jail != nil {
		return true
	}

	return false
}

// SetJail gets a reference to the given string and assigns it to the Jail field.
func (o *JailFstab) SetJail(v string) {
	o.Jail = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *JailFstab) GetOptions() JailFstab1 {
	if o == nil || o.Options == nil {
		var ret JailFstab1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFstab) GetOptionsOk() (*JailFstab1, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *JailFstab) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given JailFstab1 and assigns it to the Options field.
func (o *JailFstab) SetOptions(v JailFstab1) {
	o.Options = &v
}

func (o JailFstab) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Jail != nil {
		toSerialize["jail"] = o.Jail
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *JailFstab) UnmarshalJSON(bytes []byte) (err error) {
	varJailFstab := _JailFstab{}

	if err = json.Unmarshal(bytes, &varJailFstab); err == nil {
		*o = JailFstab(varJailFstab)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "jail")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJailFstab struct {
	value *JailFstab
	isSet bool
}

func (v NullableJailFstab) Get() *JailFstab {
	return v.value
}

func (v *NullableJailFstab) Set(val *JailFstab) {
	v.value = val
	v.isSet = true
}

func (v NullableJailFstab) IsSet() bool {
	return v.isSet
}

func (v *NullableJailFstab) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailFstab(val *JailFstab) *NullableJailFstab {
	return &NullableJailFstab{value: val, isSet: true}
}

func (v NullableJailFstab) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailFstab) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



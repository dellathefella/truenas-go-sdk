/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// JailUpdate1 struct for JailUpdate1
type JailUpdate1 struct {
	Plugin               *bool `json:"plugin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JailUpdate1 JailUpdate1

// NewJailUpdate1 instantiates a new JailUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailUpdate1() *JailUpdate1 {
	this := JailUpdate1{}
	return &this
}

// NewJailUpdate1WithDefaults instantiates a new JailUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailUpdate1WithDefaults() *JailUpdate1 {
	this := JailUpdate1{}
	return &this
}

// GetPlugin returns the Plugin field value if set, zero value otherwise.
func (o *JailUpdate1) GetPlugin() bool {
	if o == nil || o.Plugin == nil {
		var ret bool
		return ret
	}
	return *o.Plugin
}

// GetPluginOk returns a tuple with the Plugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailUpdate1) GetPluginOk() (*bool, bool) {
	if o == nil || o.Plugin == nil {
		return nil, false
	}
	return o.Plugin, true
}

// HasPlugin returns a boolean if a field has been set.
func (o *JailUpdate1) HasPlugin() bool {
	if o != nil && o.Plugin != nil {
		return true
	}

	return false
}

// SetPlugin gets a reference to the given bool and assigns it to the Plugin field.
func (o *JailUpdate1) SetPlugin(v bool) {
	o.Plugin = &v
}

func (o JailUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plugin != nil {
		toSerialize["plugin"] = o.Plugin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *JailUpdate1) UnmarshalJSON(bytes []byte) (err error) {
	varJailUpdate1 := _JailUpdate1{}

	if err = json.Unmarshal(bytes, &varJailUpdate1); err == nil {
		*o = JailUpdate1(varJailUpdate1)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "plugin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJailUpdate1 struct {
	value *JailUpdate1
	isSet bool
}

func (v NullableJailUpdate1) Get() *JailUpdate1 {
	return v.value
}

func (v *NullableJailUpdate1) Set(val *JailUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableJailUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableJailUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailUpdate1(val *JailUpdate1) *NullableJailUpdate1 {
	return &NullableJailUpdate1{value: val, isSet: true}
}

func (v NullableJailUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

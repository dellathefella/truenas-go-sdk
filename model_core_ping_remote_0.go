/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// CorePingRemote0 struct for CorePingRemote0
type CorePingRemote0 struct {
	Type     *string `json:"type,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	Timeout  *int32  `json:"timeout,omitempty"`
}

// NewCorePingRemote0 instantiates a new CorePingRemote0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorePingRemote0() *CorePingRemote0 {
	this := CorePingRemote0{}
	return &this
}

// NewCorePingRemote0WithDefaults instantiates a new CorePingRemote0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorePingRemote0WithDefaults() *CorePingRemote0 {
	this := CorePingRemote0{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CorePingRemote0) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorePingRemote0) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CorePingRemote0) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CorePingRemote0) SetType(v string) {
	o.Type = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CorePingRemote0) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorePingRemote0) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CorePingRemote0) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CorePingRemote0) SetHostname(v string) {
	o.Hostname = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *CorePingRemote0) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorePingRemote0) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *CorePingRemote0) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *CorePingRemote0) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o CorePingRemote0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	return json.Marshal(toSerialize)
}

type NullableCorePingRemote0 struct {
	value *CorePingRemote0
	isSet bool
}

func (v NullableCorePingRemote0) Get() *CorePingRemote0 {
	return v.value
}

func (v *NullableCorePingRemote0) Set(val *CorePingRemote0) {
	v.value = val
	v.isSet = true
}

func (v NullableCorePingRemote0) IsSet() bool {
	return v.isSet
}

func (v *NullableCorePingRemote0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorePingRemote0(val *CorePingRemote0) *NullableCorePingRemote0 {
	return &NullableCorePingRemote0{value: val, isSet: true}
}

func (v NullableCorePingRemote0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorePingRemote0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

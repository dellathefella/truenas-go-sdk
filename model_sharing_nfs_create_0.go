/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// SharingNfsCreate0 struct for SharingNfsCreate0
type SharingNfsCreate0 struct {
	Paths        []string       `json:"paths,omitempty"`
	Comment      *string        `json:"comment,omitempty"`
	Networks     []string       `json:"networks,omitempty"`
	Hosts        []string       `json:"hosts,omitempty"`
	Alldirs      *bool          `json:"alldirs,omitempty"`
	Ro           *bool          `json:"ro,omitempty"`
	Quiet        *bool          `json:"quiet,omitempty"`
	MaprootUser  NullableString `json:"maproot_user,omitempty"`
	MaprootGroup NullableString `json:"maproot_group,omitempty"`
	MapallUser   NullableString `json:"mapall_user,omitempty"`
	MapallGroup  NullableString `json:"mapall_group,omitempty"`
	Security     []string       `json:"security,omitempty"`
	Enabled      *bool          `json:"enabled,omitempty"`
}

// NewSharingNfsCreate0 instantiates a new SharingNfsCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingNfsCreate0() *SharingNfsCreate0 {
	this := SharingNfsCreate0{}
	return &this
}

// NewSharingNfsCreate0WithDefaults instantiates a new SharingNfsCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingNfsCreate0WithDefaults() *SharingNfsCreate0 {
	this := SharingNfsCreate0{}
	return &this
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetPaths() []string {
	if o == nil || o.Paths == nil {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetPathsOk() ([]string, bool) {
	if o == nil || o.Paths == nil {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasPaths() bool {
	if o != nil && o.Paths != nil {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *SharingNfsCreate0) SetPaths(v []string) {
	o.Paths = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SharingNfsCreate0) SetComment(v string) {
	o.Comment = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetNetworksOk() ([]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *SharingNfsCreate0) SetNetworks(v []string) {
	o.Networks = v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetHosts() []string {
	if o == nil || o.Hosts == nil {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetHostsOk() ([]string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *SharingNfsCreate0) SetHosts(v []string) {
	o.Hosts = v
}

// GetAlldirs returns the Alldirs field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetAlldirs() bool {
	if o == nil || o.Alldirs == nil {
		var ret bool
		return ret
	}
	return *o.Alldirs
}

// GetAlldirsOk returns a tuple with the Alldirs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetAlldirsOk() (*bool, bool) {
	if o == nil || o.Alldirs == nil {
		return nil, false
	}
	return o.Alldirs, true
}

// HasAlldirs returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasAlldirs() bool {
	if o != nil && o.Alldirs != nil {
		return true
	}

	return false
}

// SetAlldirs gets a reference to the given bool and assigns it to the Alldirs field.
func (o *SharingNfsCreate0) SetAlldirs(v bool) {
	o.Alldirs = &v
}

// GetRo returns the Ro field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetRo() bool {
	if o == nil || o.Ro == nil {
		var ret bool
		return ret
	}
	return *o.Ro
}

// GetRoOk returns a tuple with the Ro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetRoOk() (*bool, bool) {
	if o == nil || o.Ro == nil {
		return nil, false
	}
	return o.Ro, true
}

// HasRo returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasRo() bool {
	if o != nil && o.Ro != nil {
		return true
	}

	return false
}

// SetRo gets a reference to the given bool and assigns it to the Ro field.
func (o *SharingNfsCreate0) SetRo(v bool) {
	o.Ro = &v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetQuiet() bool {
	if o == nil || o.Quiet == nil {
		var ret bool
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetQuietOk() (*bool, bool) {
	if o == nil || o.Quiet == nil {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasQuiet() bool {
	if o != nil && o.Quiet != nil {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given bool and assigns it to the Quiet field.
func (o *SharingNfsCreate0) SetQuiet(v bool) {
	o.Quiet = &v
}

// GetMaprootUser returns the MaprootUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharingNfsCreate0) GetMaprootUser() string {
	if o == nil || o.MaprootUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.MaprootUser.Get()
}

// GetMaprootUserOk returns a tuple with the MaprootUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharingNfsCreate0) GetMaprootUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaprootUser.Get(), o.MaprootUser.IsSet()
}

// HasMaprootUser returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasMaprootUser() bool {
	if o != nil && o.MaprootUser.IsSet() {
		return true
	}

	return false
}

// SetMaprootUser gets a reference to the given NullableString and assigns it to the MaprootUser field.
func (o *SharingNfsCreate0) SetMaprootUser(v string) {
	o.MaprootUser.Set(&v)
}

// SetMaprootUserNil sets the value for MaprootUser to be an explicit nil
func (o *SharingNfsCreate0) SetMaprootUserNil() {
	o.MaprootUser.Set(nil)
}

// UnsetMaprootUser ensures that no value is present for MaprootUser, not even an explicit nil
func (o *SharingNfsCreate0) UnsetMaprootUser() {
	o.MaprootUser.Unset()
}

// GetMaprootGroup returns the MaprootGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharingNfsCreate0) GetMaprootGroup() string {
	if o == nil || o.MaprootGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.MaprootGroup.Get()
}

// GetMaprootGroupOk returns a tuple with the MaprootGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharingNfsCreate0) GetMaprootGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaprootGroup.Get(), o.MaprootGroup.IsSet()
}

// HasMaprootGroup returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasMaprootGroup() bool {
	if o != nil && o.MaprootGroup.IsSet() {
		return true
	}

	return false
}

// SetMaprootGroup gets a reference to the given NullableString and assigns it to the MaprootGroup field.
func (o *SharingNfsCreate0) SetMaprootGroup(v string) {
	o.MaprootGroup.Set(&v)
}

// SetMaprootGroupNil sets the value for MaprootGroup to be an explicit nil
func (o *SharingNfsCreate0) SetMaprootGroupNil() {
	o.MaprootGroup.Set(nil)
}

// UnsetMaprootGroup ensures that no value is present for MaprootGroup, not even an explicit nil
func (o *SharingNfsCreate0) UnsetMaprootGroup() {
	o.MaprootGroup.Unset()
}

// GetMapallUser returns the MapallUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharingNfsCreate0) GetMapallUser() string {
	if o == nil || o.MapallUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.MapallUser.Get()
}

// GetMapallUserOk returns a tuple with the MapallUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharingNfsCreate0) GetMapallUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MapallUser.Get(), o.MapallUser.IsSet()
}

// HasMapallUser returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasMapallUser() bool {
	if o != nil && o.MapallUser.IsSet() {
		return true
	}

	return false
}

// SetMapallUser gets a reference to the given NullableString and assigns it to the MapallUser field.
func (o *SharingNfsCreate0) SetMapallUser(v string) {
	o.MapallUser.Set(&v)
}

// SetMapallUserNil sets the value for MapallUser to be an explicit nil
func (o *SharingNfsCreate0) SetMapallUserNil() {
	o.MapallUser.Set(nil)
}

// UnsetMapallUser ensures that no value is present for MapallUser, not even an explicit nil
func (o *SharingNfsCreate0) UnsetMapallUser() {
	o.MapallUser.Unset()
}

// GetMapallGroup returns the MapallGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharingNfsCreate0) GetMapallGroup() string {
	if o == nil || o.MapallGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.MapallGroup.Get()
}

// GetMapallGroupOk returns a tuple with the MapallGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharingNfsCreate0) GetMapallGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MapallGroup.Get(), o.MapallGroup.IsSet()
}

// HasMapallGroup returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasMapallGroup() bool {
	if o != nil && o.MapallGroup.IsSet() {
		return true
	}

	return false
}

// SetMapallGroup gets a reference to the given NullableString and assigns it to the MapallGroup field.
func (o *SharingNfsCreate0) SetMapallGroup(v string) {
	o.MapallGroup.Set(&v)
}

// SetMapallGroupNil sets the value for MapallGroup to be an explicit nil
func (o *SharingNfsCreate0) SetMapallGroupNil() {
	o.MapallGroup.Set(nil)
}

// UnsetMapallGroup ensures that no value is present for MapallGroup, not even an explicit nil
func (o *SharingNfsCreate0) UnsetMapallGroup() {
	o.MapallGroup.Unset()
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetSecurity() []string {
	if o == nil || o.Security == nil {
		var ret []string
		return ret
	}
	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetSecurityOk() ([]string, bool) {
	if o == nil || o.Security == nil {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasSecurity() bool {
	if o != nil && o.Security != nil {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given []string and assigns it to the Security field.
func (o *SharingNfsCreate0) SetSecurity(v []string) {
	o.Security = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SharingNfsCreate0) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingNfsCreate0) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SharingNfsCreate0) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SharingNfsCreate0) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o SharingNfsCreate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Paths != nil {
		toSerialize["paths"] = o.Paths
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Alldirs != nil {
		toSerialize["alldirs"] = o.Alldirs
	}
	if o.Ro != nil {
		toSerialize["ro"] = o.Ro
	}
	if o.Quiet != nil {
		toSerialize["quiet"] = o.Quiet
	}
	if o.MaprootUser.IsSet() {
		toSerialize["maproot_user"] = o.MaprootUser.Get()
	}
	if o.MaprootGroup.IsSet() {
		toSerialize["maproot_group"] = o.MaprootGroup.Get()
	}
	if o.MapallUser.IsSet() {
		toSerialize["mapall_user"] = o.MapallUser.Get()
	}
	if o.MapallGroup.IsSet() {
		toSerialize["mapall_group"] = o.MapallGroup.Get()
	}
	if o.Security != nil {
		toSerialize["security"] = o.Security
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableSharingNfsCreate0 struct {
	value *SharingNfsCreate0
	isSet bool
}

func (v NullableSharingNfsCreate0) Get() *SharingNfsCreate0 {
	return v.value
}

func (v *NullableSharingNfsCreate0) Set(val *SharingNfsCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingNfsCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingNfsCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingNfsCreate0(val *SharingNfsCreate0) *NullableSharingNfsCreate0 {
	return &NullableSharingNfsCreate0{value: val, isSet: true}
}

func (v NullableSharingNfsCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingNfsCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

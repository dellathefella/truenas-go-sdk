/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// DiskUpdate1Enclosure struct for DiskUpdate1Enclosure
type DiskUpdate1Enclosure struct {
	Number *int32 `json:"number,omitempty"`
	Slot   *int32 `json:"slot,omitempty"`
}

// NewDiskUpdate1Enclosure instantiates a new DiskUpdate1Enclosure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskUpdate1Enclosure() *DiskUpdate1Enclosure {
	this := DiskUpdate1Enclosure{}
	return &this
}

// NewDiskUpdate1EnclosureWithDefaults instantiates a new DiskUpdate1Enclosure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskUpdate1EnclosureWithDefaults() *DiskUpdate1Enclosure {
	this := DiskUpdate1Enclosure{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *DiskUpdate1Enclosure) GetNumber() int32 {
	if o == nil || o.Number == nil {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1Enclosure) GetNumberOk() (*int32, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *DiskUpdate1Enclosure) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *DiskUpdate1Enclosure) SetNumber(v int32) {
	o.Number = &v
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *DiskUpdate1Enclosure) GetSlot() int32 {
	if o == nil || o.Slot == nil {
		var ret int32
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdate1Enclosure) GetSlotOk() (*int32, bool) {
	if o == nil || o.Slot == nil {
		return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *DiskUpdate1Enclosure) HasSlot() bool {
	if o != nil && o.Slot != nil {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int32 and assigns it to the Slot field.
func (o *DiskUpdate1Enclosure) SetSlot(v int32) {
	o.Slot = &v
}

func (o DiskUpdate1Enclosure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Slot != nil {
		toSerialize["slot"] = o.Slot
	}
	return json.Marshal(toSerialize)
}

type NullableDiskUpdate1Enclosure struct {
	value *DiskUpdate1Enclosure
	isSet bool
}

func (v NullableDiskUpdate1Enclosure) Get() *DiskUpdate1Enclosure {
	return v.value
}

func (v *NullableDiskUpdate1Enclosure) Set(val *DiskUpdate1Enclosure) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskUpdate1Enclosure) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskUpdate1Enclosure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskUpdate1Enclosure(val *DiskUpdate1Enclosure) *NullableDiskUpdate1Enclosure {
	return &NullableDiskUpdate1Enclosure{value: val, isSet: true}
}

func (v NullableDiskUpdate1Enclosure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskUpdate1Enclosure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

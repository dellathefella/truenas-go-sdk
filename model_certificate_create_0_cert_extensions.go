/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// CertificateCreate0CertExtensions struct for CertificateCreate0CertExtensions
type CertificateCreate0CertExtensions struct {
	BasicConstraints       *CertificateCreate0CertExtensionsBasicConstraints       `json:"BasicConstraints,omitempty"`
	AuthorityKeyIdentifier *CertificateCreate0CertExtensionsAuthorityKeyIdentifier `json:"AuthorityKeyIdentifier,omitempty"`
	ExtendedKeyUsage       *CertificateCreate0CertExtensionsExtendedKeyUsage       `json:"ExtendedKeyUsage,omitempty"`
	KeyUsage               *CertificateCreate0CertExtensionsKeyUsage               `json:"KeyUsage,omitempty"`
}

// NewCertificateCreate0CertExtensions instantiates a new CertificateCreate0CertExtensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateCreate0CertExtensions() *CertificateCreate0CertExtensions {
	this := CertificateCreate0CertExtensions{}
	return &this
}

// NewCertificateCreate0CertExtensionsWithDefaults instantiates a new CertificateCreate0CertExtensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateCreate0CertExtensionsWithDefaults() *CertificateCreate0CertExtensions {
	this := CertificateCreate0CertExtensions{}
	return &this
}

// GetBasicConstraints returns the BasicConstraints field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensions) GetBasicConstraints() CertificateCreate0CertExtensionsBasicConstraints {
	if o == nil || o.BasicConstraints == nil {
		var ret CertificateCreate0CertExtensionsBasicConstraints
		return ret
	}
	return *o.BasicConstraints
}

// GetBasicConstraintsOk returns a tuple with the BasicConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensions) GetBasicConstraintsOk() (*CertificateCreate0CertExtensionsBasicConstraints, bool) {
	if o == nil || o.BasicConstraints == nil {
		return nil, false
	}
	return o.BasicConstraints, true
}

// HasBasicConstraints returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensions) HasBasicConstraints() bool {
	if o != nil && o.BasicConstraints != nil {
		return true
	}

	return false
}

// SetBasicConstraints gets a reference to the given CertificateCreate0CertExtensionsBasicConstraints and assigns it to the BasicConstraints field.
func (o *CertificateCreate0CertExtensions) SetBasicConstraints(v CertificateCreate0CertExtensionsBasicConstraints) {
	o.BasicConstraints = &v
}

// GetAuthorityKeyIdentifier returns the AuthorityKeyIdentifier field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensions) GetAuthorityKeyIdentifier() CertificateCreate0CertExtensionsAuthorityKeyIdentifier {
	if o == nil || o.AuthorityKeyIdentifier == nil {
		var ret CertificateCreate0CertExtensionsAuthorityKeyIdentifier
		return ret
	}
	return *o.AuthorityKeyIdentifier
}

// GetAuthorityKeyIdentifierOk returns a tuple with the AuthorityKeyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensions) GetAuthorityKeyIdentifierOk() (*CertificateCreate0CertExtensionsAuthorityKeyIdentifier, bool) {
	if o == nil || o.AuthorityKeyIdentifier == nil {
		return nil, false
	}
	return o.AuthorityKeyIdentifier, true
}

// HasAuthorityKeyIdentifier returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensions) HasAuthorityKeyIdentifier() bool {
	if o != nil && o.AuthorityKeyIdentifier != nil {
		return true
	}

	return false
}

// SetAuthorityKeyIdentifier gets a reference to the given CertificateCreate0CertExtensionsAuthorityKeyIdentifier and assigns it to the AuthorityKeyIdentifier field.
func (o *CertificateCreate0CertExtensions) SetAuthorityKeyIdentifier(v CertificateCreate0CertExtensionsAuthorityKeyIdentifier) {
	o.AuthorityKeyIdentifier = &v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensions) GetExtendedKeyUsage() CertificateCreate0CertExtensionsExtendedKeyUsage {
	if o == nil || o.ExtendedKeyUsage == nil {
		var ret CertificateCreate0CertExtensionsExtendedKeyUsage
		return ret
	}
	return *o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensions) GetExtendedKeyUsageOk() (*CertificateCreate0CertExtensionsExtendedKeyUsage, bool) {
	if o == nil || o.ExtendedKeyUsage == nil {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensions) HasExtendedKeyUsage() bool {
	if o != nil && o.ExtendedKeyUsage != nil {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given CertificateCreate0CertExtensionsExtendedKeyUsage and assigns it to the ExtendedKeyUsage field.
func (o *CertificateCreate0CertExtensions) SetExtendedKeyUsage(v CertificateCreate0CertExtensionsExtendedKeyUsage) {
	o.ExtendedKeyUsage = &v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertificateCreate0CertExtensions) GetKeyUsage() CertificateCreate0CertExtensionsKeyUsage {
	if o == nil || o.KeyUsage == nil {
		var ret CertificateCreate0CertExtensionsKeyUsage
		return ret
	}
	return *o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0CertExtensions) GetKeyUsageOk() (*CertificateCreate0CertExtensionsKeyUsage, bool) {
	if o == nil || o.KeyUsage == nil {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertificateCreate0CertExtensions) HasKeyUsage() bool {
	if o != nil && o.KeyUsage != nil {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given CertificateCreate0CertExtensionsKeyUsage and assigns it to the KeyUsage field.
func (o *CertificateCreate0CertExtensions) SetKeyUsage(v CertificateCreate0CertExtensionsKeyUsage) {
	o.KeyUsage = &v
}

func (o CertificateCreate0CertExtensions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BasicConstraints != nil {
		toSerialize["BasicConstraints"] = o.BasicConstraints
	}
	if o.AuthorityKeyIdentifier != nil {
		toSerialize["AuthorityKeyIdentifier"] = o.AuthorityKeyIdentifier
	}
	if o.ExtendedKeyUsage != nil {
		toSerialize["ExtendedKeyUsage"] = o.ExtendedKeyUsage
	}
	if o.KeyUsage != nil {
		toSerialize["KeyUsage"] = o.KeyUsage
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateCreate0CertExtensions struct {
	value *CertificateCreate0CertExtensions
	isSet bool
}

func (v NullableCertificateCreate0CertExtensions) Get() *CertificateCreate0CertExtensions {
	return v.value
}

func (v *NullableCertificateCreate0CertExtensions) Set(val *CertificateCreate0CertExtensions) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateCreate0CertExtensions) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateCreate0CertExtensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateCreate0CertExtensions(val *CertificateCreate0CertExtensions) *NullableCertificateCreate0CertExtensions {
	return &NullableCertificateCreate0CertExtensions{value: val, isSet: true}
}

func (v NullableCertificateCreate0CertExtensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateCreate0CertExtensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

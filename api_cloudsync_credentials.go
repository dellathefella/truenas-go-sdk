/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// CloudsyncCredentialsApiService CloudsyncCredentialsApi service
type CloudsyncCredentialsApiService service

type ApiCloudsyncCredentialsGetRequest struct {
	ctx        context.Context
	ApiService *CloudsyncCredentialsApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiCloudsyncCredentialsGetRequest) Limit(limit int32) ApiCloudsyncCredentialsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudsyncCredentialsGetRequest) Offset(offset int32) ApiCloudsyncCredentialsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudsyncCredentialsGetRequest) Count(count bool) ApiCloudsyncCredentialsGetRequest {
	r.count = &count
	return r
}

func (r ApiCloudsyncCredentialsGetRequest) Sort(sort string) ApiCloudsyncCredentialsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudsyncCredentialsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsGetExecute(r)
}

/*
CloudsyncCredentialsGet Method for CloudsyncCredentialsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCloudsyncCredentialsGetRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsGet(ctx context.Context) ApiCloudsyncCredentialsGetRequest {
	return ApiCloudsyncCredentialsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsGetExecute(r ApiCloudsyncCredentialsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudsyncCredentialsIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *CloudsyncCredentialsApiService
	id         int32
}

func (r ApiCloudsyncCredentialsIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsIdIdDeleteExecute(r)
}

/*
CloudsyncCredentialsIdIdDelete Method for CloudsyncCredentialsIdIdDelete

Delete Cloud Sync Credentials of `id`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCloudsyncCredentialsIdIdDeleteRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdDelete(ctx context.Context, id int32) ApiCloudsyncCredentialsIdIdDeleteRequest {
	return ApiCloudsyncCredentialsIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdDeleteExecute(r ApiCloudsyncCredentialsIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudsyncCredentialsIdIdGetRequest struct {
	ctx        context.Context
	ApiService *CloudsyncCredentialsApiService
	id         int32
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiCloudsyncCredentialsIdIdGetRequest) Limit(limit int32) ApiCloudsyncCredentialsIdIdGetRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudsyncCredentialsIdIdGetRequest) Offset(offset int32) ApiCloudsyncCredentialsIdIdGetRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudsyncCredentialsIdIdGetRequest) Count(count bool) ApiCloudsyncCredentialsIdIdGetRequest {
	r.count = &count
	return r
}

func (r ApiCloudsyncCredentialsIdIdGetRequest) Sort(sort string) ApiCloudsyncCredentialsIdIdGetRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudsyncCredentialsIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsIdIdGetExecute(r)
}

/*
CloudsyncCredentialsIdIdGet Method for CloudsyncCredentialsIdIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCloudsyncCredentialsIdIdGetRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdGet(ctx context.Context, id int32) ApiCloudsyncCredentialsIdIdGetRequest {
	return ApiCloudsyncCredentialsIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdGetExecute(r ApiCloudsyncCredentialsIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudsyncCredentialsIdIdPutRequest struct {
	ctx                         context.Context
	ApiService                  *CloudsyncCredentialsApiService
	id                          int32
	cloudsyncCredentialsUpdate1 *CloudsyncCredentialsUpdate1
}

func (r ApiCloudsyncCredentialsIdIdPutRequest) CloudsyncCredentialsUpdate1(cloudsyncCredentialsUpdate1 CloudsyncCredentialsUpdate1) ApiCloudsyncCredentialsIdIdPutRequest {
	r.cloudsyncCredentialsUpdate1 = &cloudsyncCredentialsUpdate1
	return r
}

func (r ApiCloudsyncCredentialsIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsIdIdPutExecute(r)
}

/*
CloudsyncCredentialsIdIdPut Method for CloudsyncCredentialsIdIdPut

Update Cloud Sync Credentials of `id`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCloudsyncCredentialsIdIdPutRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdPut(ctx context.Context, id int32) ApiCloudsyncCredentialsIdIdPutRequest {
	return ApiCloudsyncCredentialsIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsIdIdPutExecute(r ApiCloudsyncCredentialsIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudsyncCredentialsUpdate1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudsyncCredentialsPostRequest struct {
	ctx                         context.Context
	ApiService                  *CloudsyncCredentialsApiService
	cloudsyncCredentialsCreate0 *CloudsyncCredentialsCreate0
}

func (r ApiCloudsyncCredentialsPostRequest) CloudsyncCredentialsCreate0(cloudsyncCredentialsCreate0 CloudsyncCredentialsCreate0) ApiCloudsyncCredentialsPostRequest {
	r.cloudsyncCredentialsCreate0 = &cloudsyncCredentialsCreate0
	return r
}

func (r ApiCloudsyncCredentialsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsPostExecute(r)
}

/*
CloudsyncCredentialsPost Method for CloudsyncCredentialsPost

Create Cloud Sync Credentials.

`attributes` is a dictionary of valid values which will be used to authorize with the `provider`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCloudsyncCredentialsPostRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsPost(ctx context.Context) ApiCloudsyncCredentialsPostRequest {
	return ApiCloudsyncCredentialsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsPostExecute(r ApiCloudsyncCredentialsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudsyncCredentialsCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudsyncCredentialsVerifyPostRequest struct {
	ctx                         context.Context
	ApiService                  *CloudsyncCredentialsApiService
	cloudsyncCredentialsVerify0 *CloudsyncCredentialsVerify0
}

func (r ApiCloudsyncCredentialsVerifyPostRequest) CloudsyncCredentialsVerify0(cloudsyncCredentialsVerify0 CloudsyncCredentialsVerify0) ApiCloudsyncCredentialsVerifyPostRequest {
	r.cloudsyncCredentialsVerify0 = &cloudsyncCredentialsVerify0
	return r
}

func (r ApiCloudsyncCredentialsVerifyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudsyncCredentialsVerifyPostExecute(r)
}

/*
CloudsyncCredentialsVerifyPost Method for CloudsyncCredentialsVerifyPost

Verify if `attributes` provided for `provider` are authorized by the `provider`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCloudsyncCredentialsVerifyPostRequest
*/
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsVerifyPost(ctx context.Context) ApiCloudsyncCredentialsVerifyPostRequest {
	return ApiCloudsyncCredentialsVerifyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CloudsyncCredentialsApiService) CloudsyncCredentialsVerifyPostExecute(r ApiCloudsyncCredentialsVerifyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudsyncCredentialsApiService.CloudsyncCredentialsVerifyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloudsync/credentials/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudsyncCredentialsVerify0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// ZfsSnapshotDelete1 struct for ZfsSnapshotDelete1
type ZfsSnapshotDelete1 struct {
	Defer *bool `json:"defer,omitempty"`
}

// NewZfsSnapshotDelete1 instantiates a new ZfsSnapshotDelete1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZfsSnapshotDelete1() *ZfsSnapshotDelete1 {
	this := ZfsSnapshotDelete1{}
	return &this
}

// NewZfsSnapshotDelete1WithDefaults instantiates a new ZfsSnapshotDelete1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZfsSnapshotDelete1WithDefaults() *ZfsSnapshotDelete1 {
	this := ZfsSnapshotDelete1{}
	return &this
}

// GetDefer returns the Defer field value if set, zero value otherwise.
func (o *ZfsSnapshotDelete1) GetDefer() bool {
	if o == nil || o.Defer == nil {
		var ret bool
		return ret
	}
	return *o.Defer
}

// GetDeferOk returns a tuple with the Defer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotDelete1) GetDeferOk() (*bool, bool) {
	if o == nil || o.Defer == nil {
		return nil, false
	}
	return o.Defer, true
}

// HasDefer returns a boolean if a field has been set.
func (o *ZfsSnapshotDelete1) HasDefer() bool {
	if o != nil && o.Defer != nil {
		return true
	}

	return false
}

// SetDefer gets a reference to the given bool and assigns it to the Defer field.
func (o *ZfsSnapshotDelete1) SetDefer(v bool) {
	o.Defer = &v
}

func (o ZfsSnapshotDelete1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Defer != nil {
		toSerialize["defer"] = o.Defer
	}
	return json.Marshal(toSerialize)
}

type NullableZfsSnapshotDelete1 struct {
	value *ZfsSnapshotDelete1
	isSet bool
}

func (v NullableZfsSnapshotDelete1) Get() *ZfsSnapshotDelete1 {
	return v.value
}

func (v *NullableZfsSnapshotDelete1) Set(val *ZfsSnapshotDelete1) {
	v.value = val
	v.isSet = true
}

func (v NullableZfsSnapshotDelete1) IsSet() bool {
	return v.isSet
}

func (v *NullableZfsSnapshotDelete1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZfsSnapshotDelete1(val *ZfsSnapshotDelete1) *NullableZfsSnapshotDelete1 {
	return &NullableZfsSnapshotDelete1{value: val, isSet: true}
}

func (v NullableZfsSnapshotDelete1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZfsSnapshotDelete1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// DiskTemperatures1 the model 'DiskTemperatures1'
type DiskTemperatures1 string

// List of disk_temperatures_1
const (
	NEVER   DiskTemperatures1 = "NEVER"
	SLEEP   DiskTemperatures1 = "SLEEP"
	STANDBY DiskTemperatures1 = "STANDBY"
	IDLE    DiskTemperatures1 = "IDLE"
)

// All allowed values of DiskTemperatures1 enum
var AllowedDiskTemperatures1EnumValues = []DiskTemperatures1{
	"NEVER",
	"SLEEP",
	"STANDBY",
	"IDLE",
}

func (v *DiskTemperatures1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskTemperatures1(value)
	for _, existing := range AllowedDiskTemperatures1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskTemperatures1", value)
}

// NewDiskTemperatures1FromValue returns a pointer to a valid DiskTemperatures1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskTemperatures1FromValue(v string) (*DiskTemperatures1, error) {
	ev := DiskTemperatures1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskTemperatures1: valid values are %v", v, AllowedDiskTemperatures1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskTemperatures1) IsValid() bool {
	for _, existing := range AllowedDiskTemperatures1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to disk_temperatures_1 value
func (v DiskTemperatures1) Ptr() *DiskTemperatures1 {
	return &v
}

type NullableDiskTemperatures1 struct {
	value *DiskTemperatures1
	isSet bool
}

func (v NullableDiskTemperatures1) Get() *DiskTemperatures1 {
	return v.value
}

func (v *NullableDiskTemperatures1) Set(val *DiskTemperatures1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTemperatures1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTemperatures1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTemperatures1(val *DiskTemperatures1) *NullableDiskTemperatures1 {
	return &NullableDiskTemperatures1{value: val, isSet: true}
}

func (v NullableDiskTemperatures1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTemperatures1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

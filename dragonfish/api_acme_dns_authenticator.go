/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AcmeDnsAuthenticatorApiService AcmeDnsAuthenticatorApi service
type AcmeDnsAuthenticatorApiService service

type ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
}

func (r ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorAuthenticatorSchemasGetExecute(r)
}

/*
AcmeDnsAuthenticatorAuthenticatorSchemasGet Method for AcmeDnsAuthenticatorAuthenticatorSchemasGet

Get the schemas for all DNS providers we support for ACME DNS Challenge and the respective attributes
required for connecting to them while validating a DNS Challenge

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorAuthenticatorSchemasGet(ctx context.Context) ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest {
	return ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorAuthenticatorSchemasGetExecute(r ApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorAuthenticatorSchemasGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/authenticator_schemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAcmeDnsAuthenticatorGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiAcmeDnsAuthenticatorGetRequest) Limit(limit int32) ApiAcmeDnsAuthenticatorGetRequest {
	r.limit = &limit
	return r
}

func (r ApiAcmeDnsAuthenticatorGetRequest) Offset(offset int32) ApiAcmeDnsAuthenticatorGetRequest {
	r.offset = &offset
	return r
}

func (r ApiAcmeDnsAuthenticatorGetRequest) Count(count bool) ApiAcmeDnsAuthenticatorGetRequest {
	r.count = &count
	return r
}

func (r ApiAcmeDnsAuthenticatorGetRequest) Sort(sort string) ApiAcmeDnsAuthenticatorGetRequest {
	r.sort = &sort
	return r
}

func (r ApiAcmeDnsAuthenticatorGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorGetExecute(r)
}

/*
AcmeDnsAuthenticatorGet Method for AcmeDnsAuthenticatorGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAcmeDnsAuthenticatorGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorGet(ctx context.Context) ApiAcmeDnsAuthenticatorGetRequest {
	return ApiAcmeDnsAuthenticatorGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorGetExecute(r ApiAcmeDnsAuthenticatorGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAcmeDnsAuthenticatorIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	id         int32
}

func (r ApiAcmeDnsAuthenticatorIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdDeleteExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdDelete Method for AcmeDnsAuthenticatorIdIdDelete

Delete DNS Authenticator of `id`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAcmeDnsAuthenticatorIdIdDeleteRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdDelete(ctx context.Context, id int32) ApiAcmeDnsAuthenticatorIdIdDeleteRequest {
	return ApiAcmeDnsAuthenticatorIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdDeleteExecute(r ApiAcmeDnsAuthenticatorIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAcmeDnsAuthenticatorIdIdGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	id         int32
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiAcmeDnsAuthenticatorIdIdGetRequest) Limit(limit int32) ApiAcmeDnsAuthenticatorIdIdGetRequest {
	r.limit = &limit
	return r
}

func (r ApiAcmeDnsAuthenticatorIdIdGetRequest) Offset(offset int32) ApiAcmeDnsAuthenticatorIdIdGetRequest {
	r.offset = &offset
	return r
}

func (r ApiAcmeDnsAuthenticatorIdIdGetRequest) Count(count bool) ApiAcmeDnsAuthenticatorIdIdGetRequest {
	r.count = &count
	return r
}

func (r ApiAcmeDnsAuthenticatorIdIdGetRequest) Sort(sort string) ApiAcmeDnsAuthenticatorIdIdGetRequest {
	r.sort = &sort
	return r
}

func (r ApiAcmeDnsAuthenticatorIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdGetExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdGet Method for AcmeDnsAuthenticatorIdIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAcmeDnsAuthenticatorIdIdGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdGet(ctx context.Context, id int32) ApiAcmeDnsAuthenticatorIdIdGetRequest {
	return ApiAcmeDnsAuthenticatorIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdGetExecute(r ApiAcmeDnsAuthenticatorIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAcmeDnsAuthenticatorIdIdPutRequest struct {
	ctx                         context.Context
	ApiService                  *AcmeDnsAuthenticatorApiService
	id                          int32
	acmeDnsAuthenticatorUpdate1 *AcmeDnsAuthenticatorUpdate1
}

func (r ApiAcmeDnsAuthenticatorIdIdPutRequest) AcmeDnsAuthenticatorUpdate1(acmeDnsAuthenticatorUpdate1 AcmeDnsAuthenticatorUpdate1) ApiAcmeDnsAuthenticatorIdIdPutRequest {
	r.acmeDnsAuthenticatorUpdate1 = &acmeDnsAuthenticatorUpdate1
	return r
}

func (r ApiAcmeDnsAuthenticatorIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdPutExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdPut Method for AcmeDnsAuthenticatorIdIdPut

Update DNS Authenticator of `id`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAcmeDnsAuthenticatorIdIdPutRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdPut(ctx context.Context, id int32) ApiAcmeDnsAuthenticatorIdIdPutRequest {
	return ApiAcmeDnsAuthenticatorIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdPutExecute(r ApiAcmeDnsAuthenticatorIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.acmeDnsAuthenticatorUpdate1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAcmeDnsAuthenticatorPostRequest struct {
	ctx                         context.Context
	ApiService                  *AcmeDnsAuthenticatorApiService
	acmeDnsAuthenticatorCreate0 *AcmeDnsAuthenticatorCreate0
}

func (r ApiAcmeDnsAuthenticatorPostRequest) AcmeDnsAuthenticatorCreate0(acmeDnsAuthenticatorCreate0 AcmeDnsAuthenticatorCreate0) ApiAcmeDnsAuthenticatorPostRequest {
	r.acmeDnsAuthenticatorCreate0 = &acmeDnsAuthenticatorCreate0
	return r
}

func (r ApiAcmeDnsAuthenticatorPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorPostExecute(r)
}

/*
AcmeDnsAuthenticatorPost Method for AcmeDnsAuthenticatorPost

# Create a DNS Authenticator

Create a specific DNS Authenticator containing required authentication details for the said
provider to successfully connect with it

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAcmeDnsAuthenticatorPostRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorPost(ctx context.Context) ApiAcmeDnsAuthenticatorPostRequest {
	return ApiAcmeDnsAuthenticatorPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorPostExecute(r ApiAcmeDnsAuthenticatorPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.acmeDnsAuthenticatorCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PoolReplace1 struct for PoolReplace1
type PoolReplace1 struct {
	Label      *string `json:"label,omitempty"`
	Disk       *string `json:"disk,omitempty"`
	Force      *bool   `json:"force,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
}

// NewPoolReplace1 instantiates a new PoolReplace1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolReplace1() *PoolReplace1 {
	this := PoolReplace1{}
	return &this
}

// NewPoolReplace1WithDefaults instantiates a new PoolReplace1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolReplace1WithDefaults() *PoolReplace1 {
	this := PoolReplace1{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PoolReplace1) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolReplace1) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PoolReplace1) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PoolReplace1) SetLabel(v string) {
	o.Label = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *PoolReplace1) GetDisk() string {
	if o == nil || o.Disk == nil {
		var ret string
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolReplace1) GetDiskOk() (*string, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *PoolReplace1) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given string and assigns it to the Disk field.
func (o *PoolReplace1) SetDisk(v string) {
	o.Disk = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *PoolReplace1) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolReplace1) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *PoolReplace1) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *PoolReplace1) SetForce(v bool) {
	o.Force = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *PoolReplace1) GetPassphrase() string {
	if o == nil || o.Passphrase == nil {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolReplace1) GetPassphraseOk() (*string, bool) {
	if o == nil || o.Passphrase == nil {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *PoolReplace1) HasPassphrase() bool {
	if o != nil && o.Passphrase != nil {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *PoolReplace1) SetPassphrase(v string) {
	o.Passphrase = &v
}

func (o PoolReplace1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Disk != nil {
		toSerialize["disk"] = o.Disk
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	if o.Passphrase != nil {
		toSerialize["passphrase"] = o.Passphrase
	}
	return json.Marshal(toSerialize)
}

type NullablePoolReplace1 struct {
	value *PoolReplace1
	isSet bool
}

func (v NullablePoolReplace1) Get() *PoolReplace1 {
	return v.value
}

func (v *NullablePoolReplace1) Set(val *PoolReplace1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolReplace1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolReplace1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolReplace1(val *PoolReplace1) *NullablePoolReplace1 {
	return &NullablePoolReplace1{value: val, isSet: true}
}

func (v NullablePoolReplace1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolReplace1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// JailFetch0 struct for JailFetch0
type JailFetch0 struct {
	Release  *string        `json:"release,omitempty"`
	Server   *string        `json:"server,omitempty"`
	User     *string        `json:"user,omitempty"`
	Password *string        `json:"password,omitempty"`
	Name     NullableString `json:"name,omitempty"`
	JailName *string        `json:"jail_name,omitempty"`
	Accept   *bool          `json:"accept,omitempty"`
	Https    *bool          `json:"https,omitempty"`
	Props    []interface{}  `json:"props,omitempty"`
	Files    []interface{}  `json:"files,omitempty"`
	Branch   NullableString `json:"branch,omitempty"`
}

// NewJailFetch0 instantiates a new JailFetch0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailFetch0() *JailFetch0 {
	this := JailFetch0{}
	return &this
}

// NewJailFetch0WithDefaults instantiates a new JailFetch0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailFetch0WithDefaults() *JailFetch0 {
	this := JailFetch0{}
	return &this
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *JailFetch0) GetRelease() string {
	if o == nil || o.Release == nil {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetReleaseOk() (*string, bool) {
	if o == nil || o.Release == nil {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *JailFetch0) HasRelease() bool {
	if o != nil && o.Release != nil {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *JailFetch0) SetRelease(v string) {
	o.Release = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *JailFetch0) GetServer() string {
	if o == nil || o.Server == nil {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetServerOk() (*string, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *JailFetch0) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *JailFetch0) SetServer(v string) {
	o.Server = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *JailFetch0) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *JailFetch0) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *JailFetch0) SetUser(v string) {
	o.User = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *JailFetch0) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *JailFetch0) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *JailFetch0) SetPassword(v string) {
	o.Password = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JailFetch0) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JailFetch0) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *JailFetch0) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *JailFetch0) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *JailFetch0) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *JailFetch0) UnsetName() {
	o.Name.Unset()
}

// GetJailName returns the JailName field value if set, zero value otherwise.
func (o *JailFetch0) GetJailName() string {
	if o == nil || o.JailName == nil {
		var ret string
		return ret
	}
	return *o.JailName
}

// GetJailNameOk returns a tuple with the JailName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetJailNameOk() (*string, bool) {
	if o == nil || o.JailName == nil {
		return nil, false
	}
	return o.JailName, true
}

// HasJailName returns a boolean if a field has been set.
func (o *JailFetch0) HasJailName() bool {
	if o != nil && o.JailName != nil {
		return true
	}

	return false
}

// SetJailName gets a reference to the given string and assigns it to the JailName field.
func (o *JailFetch0) SetJailName(v string) {
	o.JailName = &v
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *JailFetch0) GetAccept() bool {
	if o == nil || o.Accept == nil {
		var ret bool
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetAcceptOk() (*bool, bool) {
	if o == nil || o.Accept == nil {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *JailFetch0) HasAccept() bool {
	if o != nil && o.Accept != nil {
		return true
	}

	return false
}

// SetAccept gets a reference to the given bool and assigns it to the Accept field.
func (o *JailFetch0) SetAccept(v bool) {
	o.Accept = &v
}

// GetHttps returns the Https field value if set, zero value otherwise.
func (o *JailFetch0) GetHttps() bool {
	if o == nil || o.Https == nil {
		var ret bool
		return ret
	}
	return *o.Https
}

// GetHttpsOk returns a tuple with the Https field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetHttpsOk() (*bool, bool) {
	if o == nil || o.Https == nil {
		return nil, false
	}
	return o.Https, true
}

// HasHttps returns a boolean if a field has been set.
func (o *JailFetch0) HasHttps() bool {
	if o != nil && o.Https != nil {
		return true
	}

	return false
}

// SetHttps gets a reference to the given bool and assigns it to the Https field.
func (o *JailFetch0) SetHttps(v bool) {
	o.Https = &v
}

// GetProps returns the Props field value if set, zero value otherwise.
func (o *JailFetch0) GetProps() []interface{} {
	if o == nil || o.Props == nil {
		var ret []interface{}
		return ret
	}
	return o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetPropsOk() ([]interface{}, bool) {
	if o == nil || o.Props == nil {
		return nil, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *JailFetch0) HasProps() bool {
	if o != nil && o.Props != nil {
		return true
	}

	return false
}

// SetProps gets a reference to the given []interface{} and assigns it to the Props field.
func (o *JailFetch0) SetProps(v []interface{}) {
	o.Props = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *JailFetch0) GetFiles() []interface{} {
	if o == nil || o.Files == nil {
		var ret []interface{}
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailFetch0) GetFilesOk() ([]interface{}, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *JailFetch0) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []interface{} and assigns it to the Files field.
func (o *JailFetch0) SetFiles(v []interface{}) {
	o.Files = v
}

// GetBranch returns the Branch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JailFetch0) GetBranch() string {
	if o == nil || o.Branch.Get() == nil {
		var ret string
		return ret
	}
	return *o.Branch.Get()
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JailFetch0) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branch.Get(), o.Branch.IsSet()
}

// HasBranch returns a boolean if a field has been set.
func (o *JailFetch0) HasBranch() bool {
	if o != nil && o.Branch.IsSet() {
		return true
	}

	return false
}

// SetBranch gets a reference to the given NullableString and assigns it to the Branch field.
func (o *JailFetch0) SetBranch(v string) {
	o.Branch.Set(&v)
}

// SetBranchNil sets the value for Branch to be an explicit nil
func (o *JailFetch0) SetBranchNil() {
	o.Branch.Set(nil)
}

// UnsetBranch ensures that no value is present for Branch, not even an explicit nil
func (o *JailFetch0) UnsetBranch() {
	o.Branch.Unset()
}

func (o JailFetch0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Release != nil {
		toSerialize["release"] = o.Release
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.JailName != nil {
		toSerialize["jail_name"] = o.JailName
	}
	if o.Accept != nil {
		toSerialize["accept"] = o.Accept
	}
	if o.Https != nil {
		toSerialize["https"] = o.Https
	}
	if o.Props != nil {
		toSerialize["props"] = o.Props
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Branch.IsSet() {
		toSerialize["branch"] = o.Branch.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableJailFetch0 struct {
	value *JailFetch0
	isSet bool
}

func (v NullableJailFetch0) Get() *JailFetch0 {
	return v.value
}

func (v *NullableJailFetch0) Set(val *JailFetch0) {
	v.value = val
	v.isSet = true
}

func (v NullableJailFetch0) IsSet() bool {
	return v.isSet
}

func (v *NullableJailFetch0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailFetch0(val *JailFetch0) *NullableJailFetch0 {
	return &NullableJailFetch0{value: val, isSet: true}
}

func (v NullableJailFetch0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailFetch0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// PoolScrub1 the model 'PoolScrub1'
type PoolScrub1 string

// List of pool_scrub_1
const (
	START PoolScrub1 = "START"
	STOP  PoolScrub1 = "STOP"
	PAUSE PoolScrub1 = "PAUSE"
)

// All allowed values of PoolScrub1 enum
var AllowedPoolScrub1EnumValues = []PoolScrub1{
	"START",
	"STOP",
	"PAUSE",
}

func (v *PoolScrub1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PoolScrub1(value)
	for _, existing := range AllowedPoolScrub1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PoolScrub1", value)
}

// NewPoolScrub1FromValue returns a pointer to a valid PoolScrub1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPoolScrub1FromValue(v string) (*PoolScrub1, error) {
	ev := PoolScrub1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PoolScrub1: valid values are %v", v, AllowedPoolScrub1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PoolScrub1) IsValid() bool {
	for _, existing := range AllowedPoolScrub1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pool_scrub_1 value
func (v PoolScrub1) Ptr() *PoolScrub1 {
	return &v
}

type NullablePoolScrub1 struct {
	value *PoolScrub1
	isSet bool
}

func (v NullablePoolScrub1) Get() *PoolScrub1 {
	return v.value
}

func (v *NullablePoolScrub1) Set(val *PoolScrub1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolScrub1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolScrub1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolScrub1(val *PoolScrub1) *NullablePoolScrub1 {
	return &NullablePoolScrub1{value: val, isSet: true}
}

func (v NullablePoolScrub1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolScrub1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

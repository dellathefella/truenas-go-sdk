/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PoolDatasetPermission1 struct for PoolDatasetPermission1
type PoolDatasetPermission1 struct {
	User    *string                    `json:"user,omitempty"`
	Group   *string                    `json:"group,omitempty"`
	Mode    NullableString             `json:"mode,omitempty"`
	Acl     []map[string]interface{}   `json:"acl,omitempty"`
	Options *FilesystemSetperm0Options `json:"options,omitempty"`
}

// NewPoolDatasetPermission1 instantiates a new PoolDatasetPermission1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDatasetPermission1() *PoolDatasetPermission1 {
	this := PoolDatasetPermission1{}
	return &this
}

// NewPoolDatasetPermission1WithDefaults instantiates a new PoolDatasetPermission1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDatasetPermission1WithDefaults() *PoolDatasetPermission1 {
	this := PoolDatasetPermission1{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PoolDatasetPermission1) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetPermission1) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PoolDatasetPermission1) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *PoolDatasetPermission1) SetUser(v string) {
	o.User = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *PoolDatasetPermission1) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetPermission1) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *PoolDatasetPermission1) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *PoolDatasetPermission1) SetGroup(v string) {
	o.Group = &v
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PoolDatasetPermission1) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PoolDatasetPermission1) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *PoolDatasetPermission1) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *PoolDatasetPermission1) SetMode(v string) {
	o.Mode.Set(&v)
}

// SetModeNil sets the value for Mode to be an explicit nil
func (o *PoolDatasetPermission1) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *PoolDatasetPermission1) UnsetMode() {
	o.Mode.Unset()
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *PoolDatasetPermission1) GetAcl() []map[string]interface{} {
	if o == nil || o.Acl == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetPermission1) GetAclOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Acl == nil {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *PoolDatasetPermission1) HasAcl() bool {
	if o != nil && o.Acl != nil {
		return true
	}

	return false
}

// SetAcl gets a reference to the given []map[string]interface{} and assigns it to the Acl field.
func (o *PoolDatasetPermission1) SetAcl(v []map[string]interface{}) {
	o.Acl = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *PoolDatasetPermission1) GetOptions() FilesystemSetperm0Options {
	if o == nil || o.Options == nil {
		var ret FilesystemSetperm0Options
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetPermission1) GetOptionsOk() (*FilesystemSetperm0Options, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *PoolDatasetPermission1) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given FilesystemSetperm0Options and assigns it to the Options field.
func (o *PoolDatasetPermission1) SetOptions(v FilesystemSetperm0Options) {
	o.Options = &v
}

func (o PoolDatasetPermission1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.Acl != nil {
		toSerialize["acl"] = o.Acl
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullablePoolDatasetPermission1 struct {
	value *PoolDatasetPermission1
	isSet bool
}

func (v NullablePoolDatasetPermission1) Get() *PoolDatasetPermission1 {
	return v.value
}

func (v *NullablePoolDatasetPermission1) Set(val *PoolDatasetPermission1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDatasetPermission1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDatasetPermission1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDatasetPermission1(val *PoolDatasetPermission1) *NullablePoolDatasetPermission1 {
	return &NullablePoolDatasetPermission1{value: val, isSet: true}
}

func (v NullablePoolDatasetPermission1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDatasetPermission1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

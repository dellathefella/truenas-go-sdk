/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ZfsSnapshotApiService ZfsSnapshotApi service
type ZfsSnapshotApiService service

type ApiZfsSnapshotClonePostRequest struct {
	ctx               context.Context
	ApiService        *ZfsSnapshotApiService
	zfsSnapshotClone0 *ZfsSnapshotClone0
}

func (r ApiZfsSnapshotClonePostRequest) ZfsSnapshotClone0(zfsSnapshotClone0 ZfsSnapshotClone0) ApiZfsSnapshotClonePostRequest {
	r.zfsSnapshotClone0 = &zfsSnapshotClone0
	return r
}

func (r ApiZfsSnapshotClonePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotClonePostExecute(r)
}

/*
ZfsSnapshotClonePost Method for ZfsSnapshotClonePost

Clone a given snapshot to a new dataset.

Returns:

	   bool: True if succeed otherwise False.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZfsSnapshotClonePostRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotClonePost(ctx context.Context) ApiZfsSnapshotClonePostRequest {
	return ApiZfsSnapshotClonePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotClonePostExecute(r ApiZfsSnapshotClonePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotClonePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot/clone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zfsSnapshotClone0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotGetRequest struct {
	ctx        context.Context
	ApiService *ZfsSnapshotApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiZfsSnapshotGetRequest) Limit(limit int32) ApiZfsSnapshotGetRequest {
	r.limit = &limit
	return r
}

func (r ApiZfsSnapshotGetRequest) Offset(offset int32) ApiZfsSnapshotGetRequest {
	r.offset = &offset
	return r
}

func (r ApiZfsSnapshotGetRequest) Count(count bool) ApiZfsSnapshotGetRequest {
	r.count = &count
	return r
}

func (r ApiZfsSnapshotGetRequest) Sort(sort string) ApiZfsSnapshotGetRequest {
	r.sort = &sort
	return r
}

func (r ApiZfsSnapshotGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotGetExecute(r)
}

/*
ZfsSnapshotGet Method for ZfsSnapshotGet

Query all ZFS Snapshots with `query-filters` and `query-options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZfsSnapshotGetRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotGet(ctx context.Context) ApiZfsSnapshotGetRequest {
	return ApiZfsSnapshotGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotGetExecute(r ApiZfsSnapshotGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotIdIdDeleteRequest struct {
	ctx                context.Context
	ApiService         *ZfsSnapshotApiService
	id                 string
	zfsSnapshotDelete1 *ZfsSnapshotDelete1
}

func (r ApiZfsSnapshotIdIdDeleteRequest) ZfsSnapshotDelete1(zfsSnapshotDelete1 ZfsSnapshotDelete1) ApiZfsSnapshotIdIdDeleteRequest {
	r.zfsSnapshotDelete1 = &zfsSnapshotDelete1
	return r
}

func (r ApiZfsSnapshotIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotIdIdDeleteExecute(r)
}

/*
ZfsSnapshotIdIdDelete Method for ZfsSnapshotIdIdDelete

Delete snapshot of name `id`.

`options.defer` will defer the deletion of snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiZfsSnapshotIdIdDeleteRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotIdIdDelete(ctx context.Context, id string) ApiZfsSnapshotIdIdDeleteRequest {
	return ApiZfsSnapshotIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotIdIdDeleteExecute(r ApiZfsSnapshotIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zfsSnapshotDelete1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotIdIdGetRequest struct {
	ctx        context.Context
	ApiService *ZfsSnapshotApiService
	id         string
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiZfsSnapshotIdIdGetRequest) Limit(limit int32) ApiZfsSnapshotIdIdGetRequest {
	r.limit = &limit
	return r
}

func (r ApiZfsSnapshotIdIdGetRequest) Offset(offset int32) ApiZfsSnapshotIdIdGetRequest {
	r.offset = &offset
	return r
}

func (r ApiZfsSnapshotIdIdGetRequest) Count(count bool) ApiZfsSnapshotIdIdGetRequest {
	r.count = &count
	return r
}

func (r ApiZfsSnapshotIdIdGetRequest) Sort(sort string) ApiZfsSnapshotIdIdGetRequest {
	r.sort = &sort
	return r
}

func (r ApiZfsSnapshotIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotIdIdGetExecute(r)
}

/*
ZfsSnapshotIdIdGet Method for ZfsSnapshotIdIdGet

Query all ZFS Snapshots with `query-filters` and `query-options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiZfsSnapshotIdIdGetRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotIdIdGet(ctx context.Context, id string) ApiZfsSnapshotIdIdGetRequest {
	return ApiZfsSnapshotIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotIdIdGetExecute(r ApiZfsSnapshotIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotPostRequest struct {
	ctx                context.Context
	ApiService         *ZfsSnapshotApiService
	zfsSnapshotCreate0 *ZfsSnapshotCreate0
}

func (r ApiZfsSnapshotPostRequest) ZfsSnapshotCreate0(zfsSnapshotCreate0 ZfsSnapshotCreate0) ApiZfsSnapshotPostRequest {
	r.zfsSnapshotCreate0 = &zfsSnapshotCreate0
	return r
}

func (r ApiZfsSnapshotPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotPostExecute(r)
}

/*
ZfsSnapshotPost Method for ZfsSnapshotPost

Take a snapshot from a given dataset.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZfsSnapshotPostRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotPost(ctx context.Context) ApiZfsSnapshotPostRequest {
	return ApiZfsSnapshotPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotPostExecute(r ApiZfsSnapshotPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zfsSnapshotCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotRemovePostRequest struct {
	ctx                context.Context
	ApiService         *ZfsSnapshotApiService
	zfsSnapshotRemove0 *ZfsSnapshotRemove0
}

func (r ApiZfsSnapshotRemovePostRequest) ZfsSnapshotRemove0(zfsSnapshotRemove0 ZfsSnapshotRemove0) ApiZfsSnapshotRemovePostRequest {
	r.zfsSnapshotRemove0 = &zfsSnapshotRemove0
	return r
}

func (r ApiZfsSnapshotRemovePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotRemovePostExecute(r)
}

/*
ZfsSnapshotRemovePost Method for ZfsSnapshotRemovePost

Remove a snapshot from a given dataset.

Returns:

	   bool: True if succeed otherwise False.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZfsSnapshotRemovePostRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotRemovePost(ctx context.Context) ApiZfsSnapshotRemovePostRequest {
	return ApiZfsSnapshotRemovePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotRemovePostExecute(r ApiZfsSnapshotRemovePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotRemovePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot/remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zfsSnapshotRemove0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiZfsSnapshotRollbackPostRequest struct {
	ctx                 context.Context
	ApiService          *ZfsSnapshotApiService
	zfsSnapshotRollback *ZfsSnapshotRollback
}

func (r ApiZfsSnapshotRollbackPostRequest) ZfsSnapshotRollback(zfsSnapshotRollback ZfsSnapshotRollback) ApiZfsSnapshotRollbackPostRequest {
	r.zfsSnapshotRollback = &zfsSnapshotRollback
	return r
}

func (r ApiZfsSnapshotRollbackPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ZfsSnapshotRollbackPostExecute(r)
}

/*
ZfsSnapshotRollbackPost Method for ZfsSnapshotRollbackPost

Rollback to a given snapshot `id`.

`options.recursive` will destroy any snapshots and bookmarks more recent than the one
specified.

`options.recursive_clones` is just like `recursive` but will also destroy any clones.

`options.force` will force unmount of any clones.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZfsSnapshotRollbackPostRequest
*/
func (a *ZfsSnapshotApiService) ZfsSnapshotRollbackPost(ctx context.Context) ApiZfsSnapshotRollbackPostRequest {
	return ApiZfsSnapshotRollbackPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ZfsSnapshotApiService) ZfsSnapshotRollbackPostExecute(r ApiZfsSnapshotRollbackPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZfsSnapshotApiService.ZfsSnapshotRollbackPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zfs/snapshot/rollback"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zfsSnapshotRollback
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

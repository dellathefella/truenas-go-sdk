/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// JailRcAction0 the model 'JailRcAction0'
type JailRcAction0 string

// List of jail_rc_action_0
const (
	START   JailRcAction0 = "START"
	STOP    JailRcAction0 = "STOP"
	RESTART JailRcAction0 = "RESTART"
)

// All allowed values of JailRcAction0 enum
var AllowedJailRcAction0EnumValues = []JailRcAction0{
	"START",
	"STOP",
	"RESTART",
}

func (v *JailRcAction0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JailRcAction0(value)
	for _, existing := range AllowedJailRcAction0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JailRcAction0", value)
}

// NewJailRcAction0FromValue returns a pointer to a valid JailRcAction0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJailRcAction0FromValue(v string) (*JailRcAction0, error) {
	ev := JailRcAction0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JailRcAction0: valid values are %v", v, AllowedJailRcAction0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JailRcAction0) IsValid() bool {
	for _, existing := range AllowedJailRcAction0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to jail_rc_action_0 value
func (v JailRcAction0) Ptr() *JailRcAction0 {
	return &v
}

type NullableJailRcAction0 struct {
	value *JailRcAction0
	isSet bool
}

func (v NullableJailRcAction0) Get() *JailRcAction0 {
	return v.value
}

func (v *NullableJailRcAction0) Set(val *JailRcAction0) {
	v.value = val
	v.isSet = true
}

func (v NullableJailRcAction0) IsSet() bool {
	return v.isSet
}

func (v *NullableJailRcAction0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailRcAction0(val *JailRcAction0) *NullableJailRcAction0 {
	return &NullableJailRcAction0{value: val, isSet: true}
}

func (v NullableJailRcAction0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailRcAction0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

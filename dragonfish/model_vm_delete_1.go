/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// VmDelete1 struct for VmDelete1
type VmDelete1 struct {
	Zvols *bool `json:"zvols,omitempty"`
	Force *bool `json:"force,omitempty"`
}

// NewVmDelete1 instantiates a new VmDelete1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmDelete1() *VmDelete1 {
	this := VmDelete1{}
	return &this
}

// NewVmDelete1WithDefaults instantiates a new VmDelete1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmDelete1WithDefaults() *VmDelete1 {
	this := VmDelete1{}
	return &this
}

// GetZvols returns the Zvols field value if set, zero value otherwise.
func (o *VmDelete1) GetZvols() bool {
	if o == nil || o.Zvols == nil {
		var ret bool
		return ret
	}
	return *o.Zvols
}

// GetZvolsOk returns a tuple with the Zvols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDelete1) GetZvolsOk() (*bool, bool) {
	if o == nil || o.Zvols == nil {
		return nil, false
	}
	return o.Zvols, true
}

// HasZvols returns a boolean if a field has been set.
func (o *VmDelete1) HasZvols() bool {
	if o != nil && o.Zvols != nil {
		return true
	}

	return false
}

// SetZvols gets a reference to the given bool and assigns it to the Zvols field.
func (o *VmDelete1) SetZvols(v bool) {
	o.Zvols = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *VmDelete1) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDelete1) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *VmDelete1) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *VmDelete1) SetForce(v bool) {
	o.Force = &v
}

func (o VmDelete1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Zvols != nil {
		toSerialize["zvols"] = o.Zvols
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullableVmDelete1 struct {
	value *VmDelete1
	isSet bool
}

func (v NullableVmDelete1) Get() *VmDelete1 {
	return v.value
}

func (v *NullableVmDelete1) Set(val *VmDelete1) {
	v.value = val
	v.isSet = true
}

func (v NullableVmDelete1) IsSet() bool {
	return v.isSet
}

func (v *NullableVmDelete1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmDelete1(val *VmDelete1) *NullableVmDelete1 {
	return &NullableVmDelete1{value: val, isSet: true}
}

func (v NullableVmDelete1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmDelete1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

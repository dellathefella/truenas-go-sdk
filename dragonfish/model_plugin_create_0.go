/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PluginCreate0 struct for PluginCreate0
type PluginCreate0 struct {
	PluginName       *string        `json:"plugin_name,omitempty"`
	JailName         *string        `json:"jail_name,omitempty"`
	Props            []interface{}  `json:"props,omitempty"`
	Branch           NullableString `json:"branch,omitempty"`
	PluginRepository *string        `json:"plugin_repository,omitempty"`
}

// NewPluginCreate0 instantiates a new PluginCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginCreate0() *PluginCreate0 {
	this := PluginCreate0{}
	return &this
}

// NewPluginCreate0WithDefaults instantiates a new PluginCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginCreate0WithDefaults() *PluginCreate0 {
	this := PluginCreate0{}
	return &this
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *PluginCreate0) GetPluginName() string {
	if o == nil || o.PluginName == nil {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreate0) GetPluginNameOk() (*string, bool) {
	if o == nil || o.PluginName == nil {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *PluginCreate0) HasPluginName() bool {
	if o != nil && o.PluginName != nil {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *PluginCreate0) SetPluginName(v string) {
	o.PluginName = &v
}

// GetJailName returns the JailName field value if set, zero value otherwise.
func (o *PluginCreate0) GetJailName() string {
	if o == nil || o.JailName == nil {
		var ret string
		return ret
	}
	return *o.JailName
}

// GetJailNameOk returns a tuple with the JailName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreate0) GetJailNameOk() (*string, bool) {
	if o == nil || o.JailName == nil {
		return nil, false
	}
	return o.JailName, true
}

// HasJailName returns a boolean if a field has been set.
func (o *PluginCreate0) HasJailName() bool {
	if o != nil && o.JailName != nil {
		return true
	}

	return false
}

// SetJailName gets a reference to the given string and assigns it to the JailName field.
func (o *PluginCreate0) SetJailName(v string) {
	o.JailName = &v
}

// GetProps returns the Props field value if set, zero value otherwise.
func (o *PluginCreate0) GetProps() []interface{} {
	if o == nil || o.Props == nil {
		var ret []interface{}
		return ret
	}
	return o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreate0) GetPropsOk() ([]interface{}, bool) {
	if o == nil || o.Props == nil {
		return nil, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *PluginCreate0) HasProps() bool {
	if o != nil && o.Props != nil {
		return true
	}

	return false
}

// SetProps gets a reference to the given []interface{} and assigns it to the Props field.
func (o *PluginCreate0) SetProps(v []interface{}) {
	o.Props = v
}

// GetBranch returns the Branch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PluginCreate0) GetBranch() string {
	if o == nil || o.Branch.Get() == nil {
		var ret string
		return ret
	}
	return *o.Branch.Get()
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluginCreate0) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branch.Get(), o.Branch.IsSet()
}

// HasBranch returns a boolean if a field has been set.
func (o *PluginCreate0) HasBranch() bool {
	if o != nil && o.Branch.IsSet() {
		return true
	}

	return false
}

// SetBranch gets a reference to the given NullableString and assigns it to the Branch field.
func (o *PluginCreate0) SetBranch(v string) {
	o.Branch.Set(&v)
}

// SetBranchNil sets the value for Branch to be an explicit nil
func (o *PluginCreate0) SetBranchNil() {
	o.Branch.Set(nil)
}

// UnsetBranch ensures that no value is present for Branch, not even an explicit nil
func (o *PluginCreate0) UnsetBranch() {
	o.Branch.Unset()
}

// GetPluginRepository returns the PluginRepository field value if set, zero value otherwise.
func (o *PluginCreate0) GetPluginRepository() string {
	if o == nil || o.PluginRepository == nil {
		var ret string
		return ret
	}
	return *o.PluginRepository
}

// GetPluginRepositoryOk returns a tuple with the PluginRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreate0) GetPluginRepositoryOk() (*string, bool) {
	if o == nil || o.PluginRepository == nil {
		return nil, false
	}
	return o.PluginRepository, true
}

// HasPluginRepository returns a boolean if a field has been set.
func (o *PluginCreate0) HasPluginRepository() bool {
	if o != nil && o.PluginRepository != nil {
		return true
	}

	return false
}

// SetPluginRepository gets a reference to the given string and assigns it to the PluginRepository field.
func (o *PluginCreate0) SetPluginRepository(v string) {
	o.PluginRepository = &v
}

func (o PluginCreate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PluginName != nil {
		toSerialize["plugin_name"] = o.PluginName
	}
	if o.JailName != nil {
		toSerialize["jail_name"] = o.JailName
	}
	if o.Props != nil {
		toSerialize["props"] = o.Props
	}
	if o.Branch.IsSet() {
		toSerialize["branch"] = o.Branch.Get()
	}
	if o.PluginRepository != nil {
		toSerialize["plugin_repository"] = o.PluginRepository
	}
	return json.Marshal(toSerialize)
}

type NullablePluginCreate0 struct {
	value *PluginCreate0
	isSet bool
}

func (v NullablePluginCreate0) Get() *PluginCreate0 {
	return v.value
}

func (v *NullablePluginCreate0) Set(val *PluginCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginCreate0(val *PluginCreate0) *NullablePluginCreate0 {
	return &NullablePluginCreate0{value: val, isSet: true}
}

func (v NullablePluginCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

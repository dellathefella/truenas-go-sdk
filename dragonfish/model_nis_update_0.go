/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// NisUpdate0 struct for NisUpdate0
type NisUpdate0 struct {
	Domain     *string       `json:"domain,omitempty"`
	Servers    []interface{} `json:"servers,omitempty"`
	SecureMode *bool         `json:"secure_mode,omitempty"`
	Manycast   *bool         `json:"manycast,omitempty"`
	Enable     *bool         `json:"enable,omitempty"`
}

// NewNisUpdate0 instantiates a new NisUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNisUpdate0() *NisUpdate0 {
	this := NisUpdate0{}
	return &this
}

// NewNisUpdate0WithDefaults instantiates a new NisUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNisUpdate0WithDefaults() *NisUpdate0 {
	this := NisUpdate0{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *NisUpdate0) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NisUpdate0) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *NisUpdate0) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *NisUpdate0) SetDomain(v string) {
	o.Domain = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *NisUpdate0) GetServers() []interface{} {
	if o == nil || o.Servers == nil {
		var ret []interface{}
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NisUpdate0) GetServersOk() ([]interface{}, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *NisUpdate0) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []interface{} and assigns it to the Servers field.
func (o *NisUpdate0) SetServers(v []interface{}) {
	o.Servers = v
}

// GetSecureMode returns the SecureMode field value if set, zero value otherwise.
func (o *NisUpdate0) GetSecureMode() bool {
	if o == nil || o.SecureMode == nil {
		var ret bool
		return ret
	}
	return *o.SecureMode
}

// GetSecureModeOk returns a tuple with the SecureMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NisUpdate0) GetSecureModeOk() (*bool, bool) {
	if o == nil || o.SecureMode == nil {
		return nil, false
	}
	return o.SecureMode, true
}

// HasSecureMode returns a boolean if a field has been set.
func (o *NisUpdate0) HasSecureMode() bool {
	if o != nil && o.SecureMode != nil {
		return true
	}

	return false
}

// SetSecureMode gets a reference to the given bool and assigns it to the SecureMode field.
func (o *NisUpdate0) SetSecureMode(v bool) {
	o.SecureMode = &v
}

// GetManycast returns the Manycast field value if set, zero value otherwise.
func (o *NisUpdate0) GetManycast() bool {
	if o == nil || o.Manycast == nil {
		var ret bool
		return ret
	}
	return *o.Manycast
}

// GetManycastOk returns a tuple with the Manycast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NisUpdate0) GetManycastOk() (*bool, bool) {
	if o == nil || o.Manycast == nil {
		return nil, false
	}
	return o.Manycast, true
}

// HasManycast returns a boolean if a field has been set.
func (o *NisUpdate0) HasManycast() bool {
	if o != nil && o.Manycast != nil {
		return true
	}

	return false
}

// SetManycast gets a reference to the given bool and assigns it to the Manycast field.
func (o *NisUpdate0) SetManycast(v bool) {
	o.Manycast = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *NisUpdate0) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NisUpdate0) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *NisUpdate0) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *NisUpdate0) SetEnable(v bool) {
	o.Enable = &v
}

func (o NisUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	if o.SecureMode != nil {
		toSerialize["secure_mode"] = o.SecureMode
	}
	if o.Manycast != nil {
		toSerialize["manycast"] = o.Manycast
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	return json.Marshal(toSerialize)
}

type NullableNisUpdate0 struct {
	value *NisUpdate0
	isSet bool
}

func (v NullableNisUpdate0) Get() *NisUpdate0 {
	return v.value
}

func (v *NullableNisUpdate0) Set(val *NisUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableNisUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableNisUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNisUpdate0(val *NisUpdate0) *NullableNisUpdate0 {
	return &NullableNisUpdate0{value: val, isSet: true}
}

func (v NullableNisUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNisUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

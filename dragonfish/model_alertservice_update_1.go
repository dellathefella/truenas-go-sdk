/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// AlertserviceUpdate1 struct for AlertserviceUpdate1
type AlertserviceUpdate1 struct {
	Name       *string                `json:"name,omitempty"`
	Type       *string                `json:"type,omitempty"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Level      *string                `json:"level,omitempty"`
	Enabled    *bool                  `json:"enabled,omitempty"`
}

// NewAlertserviceUpdate1 instantiates a new AlertserviceUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertserviceUpdate1() *AlertserviceUpdate1 {
	this := AlertserviceUpdate1{}
	return &this
}

// NewAlertserviceUpdate1WithDefaults instantiates a new AlertserviceUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertserviceUpdate1WithDefaults() *AlertserviceUpdate1 {
	this := AlertserviceUpdate1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertserviceUpdate1) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertserviceUpdate1) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertserviceUpdate1) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertserviceUpdate1) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertserviceUpdate1) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertserviceUpdate1) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertserviceUpdate1) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertserviceUpdate1) SetType(v string) {
	o.Type = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AlertserviceUpdate1) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertserviceUpdate1) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AlertserviceUpdate1) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *AlertserviceUpdate1) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *AlertserviceUpdate1) GetLevel() string {
	if o == nil || o.Level == nil {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertserviceUpdate1) GetLevelOk() (*string, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *AlertserviceUpdate1) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *AlertserviceUpdate1) SetLevel(v string) {
	o.Level = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertserviceUpdate1) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertserviceUpdate1) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertserviceUpdate1) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertserviceUpdate1) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o AlertserviceUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableAlertserviceUpdate1 struct {
	value *AlertserviceUpdate1
	isSet bool
}

func (v NullableAlertserviceUpdate1) Get() *AlertserviceUpdate1 {
	return v.value
}

func (v *NullableAlertserviceUpdate1) Set(val *AlertserviceUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertserviceUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertserviceUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertserviceUpdate1(val *AlertserviceUpdate1) *NullableAlertserviceUpdate1 {
	return &NullableAlertserviceUpdate1{value: val, isSet: true}
}

func (v NullableAlertserviceUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertserviceUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// ReportingGetData struct for ReportingGetData
type ReportingGetData struct {
	Graphs []map[string]interface{} `json:"graphs,omitempty"`
	ReportingQuery *ReportingGetData1 `json:"reporting_query,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReportingGetData ReportingGetData

// NewReportingGetData instantiates a new ReportingGetData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportingGetData() *ReportingGetData {
	this := ReportingGetData{}
	var reportingQuery ReportingGetData1 = {}
	this.ReportingQuery = &reportingQuery
	return &this
}

// NewReportingGetDataWithDefaults instantiates a new ReportingGetData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportingGetDataWithDefaults() *ReportingGetData {
	this := ReportingGetData{}
	var reportingQuery ReportingGetData1 = {}
	this.ReportingQuery = &reportingQuery
	return &this
}

// GetGraphs returns the Graphs field value if set, zero value otherwise.
func (o *ReportingGetData) GetGraphs() []map[string]interface{} {
	if o == nil || o.Graphs == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Graphs
}

// GetGraphsOk returns a tuple with the Graphs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingGetData) GetGraphsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Graphs == nil {
		return nil, false
	}
	return o.Graphs, true
}

// HasGraphs returns a boolean if a field has been set.
func (o *ReportingGetData) HasGraphs() bool {
	if o != nil && o.Graphs != nil {
		return true
	}

	return false
}

// SetGraphs gets a reference to the given []map[string]interface{} and assigns it to the Graphs field.
func (o *ReportingGetData) SetGraphs(v []map[string]interface{}) {
	o.Graphs = v
}

// GetReportingQuery returns the ReportingQuery field value if set, zero value otherwise.
func (o *ReportingGetData) GetReportingQuery() ReportingGetData1 {
	if o == nil || o.ReportingQuery == nil {
		var ret ReportingGetData1
		return ret
	}
	return *o.ReportingQuery
}

// GetReportingQueryOk returns a tuple with the ReportingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingGetData) GetReportingQueryOk() (*ReportingGetData1, bool) {
	if o == nil || o.ReportingQuery == nil {
		return nil, false
	}
	return o.ReportingQuery, true
}

// HasReportingQuery returns a boolean if a field has been set.
func (o *ReportingGetData) HasReportingQuery() bool {
	if o != nil && o.ReportingQuery != nil {
		return true
	}

	return false
}

// SetReportingQuery gets a reference to the given ReportingGetData1 and assigns it to the ReportingQuery field.
func (o *ReportingGetData) SetReportingQuery(v ReportingGetData1) {
	o.ReportingQuery = &v
}

func (o ReportingGetData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Graphs != nil {
		toSerialize["graphs"] = o.Graphs
	}
	if o.ReportingQuery != nil {
		toSerialize["reporting_query"] = o.ReportingQuery
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ReportingGetData) UnmarshalJSON(bytes []byte) (err error) {
	varReportingGetData := _ReportingGetData{}

	if err = json.Unmarshal(bytes, &varReportingGetData); err == nil {
		*o = ReportingGetData(varReportingGetData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "graphs")
		delete(additionalProperties, "reporting_query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReportingGetData struct {
	value *ReportingGetData
	isSet bool
}

func (v NullableReportingGetData) Get() *ReportingGetData {
	return v.value
}

func (v *NullableReportingGetData) Set(val *ReportingGetData) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingGetData) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingGetData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingGetData(val *ReportingGetData) *NullableReportingGetData {
	return &NullableReportingGetData{value: val, isSet: true}
}

func (v NullableReportingGetData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingGetData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



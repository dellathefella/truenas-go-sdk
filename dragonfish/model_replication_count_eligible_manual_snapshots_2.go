/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// ReplicationCountEligibleManualSnapshots2 the model 'ReplicationCountEligibleManualSnapshots2'
type ReplicationCountEligibleManualSnapshots2 string

// List of replication_count_eligible_manual_snapshots_2
const (
	SSH       ReplicationCountEligibleManualSnapshots2 = "SSH"
	SSHNETCAT ReplicationCountEligibleManualSnapshots2 = "SSH+NETCAT"
	LOCAL     ReplicationCountEligibleManualSnapshots2 = "LOCAL"
)

// All allowed values of ReplicationCountEligibleManualSnapshots2 enum
var AllowedReplicationCountEligibleManualSnapshots2EnumValues = []ReplicationCountEligibleManualSnapshots2{
	"SSH",
	"SSH+NETCAT",
	"LOCAL",
}

func (v *ReplicationCountEligibleManualSnapshots2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationCountEligibleManualSnapshots2(value)
	for _, existing := range AllowedReplicationCountEligibleManualSnapshots2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationCountEligibleManualSnapshots2", value)
}

// NewReplicationCountEligibleManualSnapshots2FromValue returns a pointer to a valid ReplicationCountEligibleManualSnapshots2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationCountEligibleManualSnapshots2FromValue(v string) (*ReplicationCountEligibleManualSnapshots2, error) {
	ev := ReplicationCountEligibleManualSnapshots2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationCountEligibleManualSnapshots2: valid values are %v", v, AllowedReplicationCountEligibleManualSnapshots2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationCountEligibleManualSnapshots2) IsValid() bool {
	for _, existing := range AllowedReplicationCountEligibleManualSnapshots2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to replication_count_eligible_manual_snapshots_2 value
func (v ReplicationCountEligibleManualSnapshots2) Ptr() *ReplicationCountEligibleManualSnapshots2 {
	return &v
}

type NullableReplicationCountEligibleManualSnapshots2 struct {
	value *ReplicationCountEligibleManualSnapshots2
	isSet bool
}

func (v NullableReplicationCountEligibleManualSnapshots2) Get() *ReplicationCountEligibleManualSnapshots2 {
	return v.value
}

func (v *NullableReplicationCountEligibleManualSnapshots2) Set(val *ReplicationCountEligibleManualSnapshots2) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationCountEligibleManualSnapshots2) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationCountEligibleManualSnapshots2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationCountEligibleManualSnapshots2(val *ReplicationCountEligibleManualSnapshots2) *NullableReplicationCountEligibleManualSnapshots2 {
	return &NullableReplicationCountEligibleManualSnapshots2{value: val, isSet: true}
}

func (v NullableReplicationCountEligibleManualSnapshots2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationCountEligibleManualSnapshots2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

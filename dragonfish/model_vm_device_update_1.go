/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// VmDeviceUpdate1 struct for VmDeviceUpdate1
type VmDeviceUpdate1 struct {
	Dtype      *string                `json:"dtype,omitempty"`
	Vm         *int32                 `json:"vm,omitempty"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Order      NullableInt32          `json:"order,omitempty"`
}

// NewVmDeviceUpdate1 instantiates a new VmDeviceUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmDeviceUpdate1() *VmDeviceUpdate1 {
	this := VmDeviceUpdate1{}
	return &this
}

// NewVmDeviceUpdate1WithDefaults instantiates a new VmDeviceUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmDeviceUpdate1WithDefaults() *VmDeviceUpdate1 {
	this := VmDeviceUpdate1{}
	return &this
}

// GetDtype returns the Dtype field value if set, zero value otherwise.
func (o *VmDeviceUpdate1) GetDtype() string {
	if o == nil || o.Dtype == nil {
		var ret string
		return ret
	}
	return *o.Dtype
}

// GetDtypeOk returns a tuple with the Dtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDeviceUpdate1) GetDtypeOk() (*string, bool) {
	if o == nil || o.Dtype == nil {
		return nil, false
	}
	return o.Dtype, true
}

// HasDtype returns a boolean if a field has been set.
func (o *VmDeviceUpdate1) HasDtype() bool {
	if o != nil && o.Dtype != nil {
		return true
	}

	return false
}

// SetDtype gets a reference to the given string and assigns it to the Dtype field.
func (o *VmDeviceUpdate1) SetDtype(v string) {
	o.Dtype = &v
}

// GetVm returns the Vm field value if set, zero value otherwise.
func (o *VmDeviceUpdate1) GetVm() int32 {
	if o == nil || o.Vm == nil {
		var ret int32
		return ret
	}
	return *o.Vm
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDeviceUpdate1) GetVmOk() (*int32, bool) {
	if o == nil || o.Vm == nil {
		return nil, false
	}
	return o.Vm, true
}

// HasVm returns a boolean if a field has been set.
func (o *VmDeviceUpdate1) HasVm() bool {
	if o != nil && o.Vm != nil {
		return true
	}

	return false
}

// SetVm gets a reference to the given int32 and assigns it to the Vm field.
func (o *VmDeviceUpdate1) SetVm(v int32) {
	o.Vm = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *VmDeviceUpdate1) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDeviceUpdate1) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *VmDeviceUpdate1) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *VmDeviceUpdate1) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmDeviceUpdate1) GetOrder() int32 {
	if o == nil || o.Order.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmDeviceUpdate1) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *VmDeviceUpdate1) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *VmDeviceUpdate1) SetOrder(v int32) {
	o.Order.Set(&v)
}

// SetOrderNil sets the value for Order to be an explicit nil
func (o *VmDeviceUpdate1) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *VmDeviceUpdate1) UnsetOrder() {
	o.Order.Unset()
}

func (o VmDeviceUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dtype != nil {
		toSerialize["dtype"] = o.Dtype
	}
	if o.Vm != nil {
		toSerialize["vm"] = o.Vm
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmDeviceUpdate1 struct {
	value *VmDeviceUpdate1
	isSet bool
}

func (v NullableVmDeviceUpdate1) Get() *VmDeviceUpdate1 {
	return v.value
}

func (v *NullableVmDeviceUpdate1) Set(val *VmDeviceUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableVmDeviceUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableVmDeviceUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmDeviceUpdate1(val *VmDeviceUpdate1) *NullableVmDeviceUpdate1 {
	return &NullableVmDeviceUpdate1{value: val, isSet: true}
}

func (v NullableVmDeviceUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmDeviceUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

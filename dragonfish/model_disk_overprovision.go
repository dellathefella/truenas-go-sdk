/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// DiskOverprovision struct for DiskOverprovision
type DiskOverprovision struct {
	Devname              *string `json:"devname,omitempty"`
	Size                 *int32  `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskOverprovision DiskOverprovision

// NewDiskOverprovision instantiates a new DiskOverprovision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskOverprovision() *DiskOverprovision {
	this := DiskOverprovision{}
	return &this
}

// NewDiskOverprovisionWithDefaults instantiates a new DiskOverprovision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskOverprovisionWithDefaults() *DiskOverprovision {
	this := DiskOverprovision{}
	return &this
}

// GetDevname returns the Devname field value if set, zero value otherwise.
func (o *DiskOverprovision) GetDevname() string {
	if o == nil || o.Devname == nil {
		var ret string
		return ret
	}
	return *o.Devname
}

// GetDevnameOk returns a tuple with the Devname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskOverprovision) GetDevnameOk() (*string, bool) {
	if o == nil || o.Devname == nil {
		return nil, false
	}
	return o.Devname, true
}

// HasDevname returns a boolean if a field has been set.
func (o *DiskOverprovision) HasDevname() bool {
	if o != nil && o.Devname != nil {
		return true
	}

	return false
}

// SetDevname gets a reference to the given string and assigns it to the Devname field.
func (o *DiskOverprovision) SetDevname(v string) {
	o.Devname = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DiskOverprovision) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskOverprovision) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DiskOverprovision) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *DiskOverprovision) SetSize(v int32) {
	o.Size = &v
}

func (o DiskOverprovision) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Devname != nil {
		toSerialize["devname"] = o.Devname
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DiskOverprovision) UnmarshalJSON(bytes []byte) (err error) {
	varDiskOverprovision := _DiskOverprovision{}

	if err = json.Unmarshal(bytes, &varDiskOverprovision); err == nil {
		*o = DiskOverprovision(varDiskOverprovision)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "devname")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskOverprovision struct {
	value *DiskOverprovision
	isSet bool
}

func (v NullableDiskOverprovision) Get() *DiskOverprovision {
	return v.value
}

func (v *NullableDiskOverprovision) Set(val *DiskOverprovision) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskOverprovision) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskOverprovision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskOverprovision(val *DiskOverprovision) *NullableDiskOverprovision {
	return &NullableDiskOverprovision{value: val, isSet: true}
}

func (v NullableDiskOverprovision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskOverprovision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

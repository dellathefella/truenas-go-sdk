/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// ActivedirectoryUpdate0 struct for ActivedirectoryUpdate0
type ActivedirectoryUpdate0 struct {
	Domainname          *string        `json:"domainname,omitempty"`
	Bindname            *string        `json:"bindname,omitempty"`
	Bindpw              *string        `json:"bindpw,omitempty"`
	VerboseLogging      *bool          `json:"verbose_logging,omitempty"`
	UseDefaultDomain    *bool          `json:"use_default_domain,omitempty"`
	AllowTrustedDoms    *bool          `json:"allow_trusted_doms,omitempty"`
	AllowDnsUpdates     *bool          `json:"allow_dns_updates,omitempty"`
	DisableFreenasCache *bool          `json:"disable_freenas_cache,omitempty"`
	RestrictPam         *bool          `json:"restrict_pam,omitempty"`
	Site                NullableString `json:"site,omitempty"`
	KerberosRealm       NullableInt32  `json:"kerberos_realm,omitempty"`
	KerberosPrincipal   NullableString `json:"kerberos_principal,omitempty"`
	Timeout             *int32         `json:"timeout,omitempty"`
	DnsTimeout          *int32         `json:"dns_timeout,omitempty"`
	NssInfo             NullableString `json:"nss_info,omitempty"`
	Createcomputer      *string        `json:"createcomputer,omitempty"`
	Netbiosname         *string        `json:"netbiosname,omitempty"`
	NetbiosnameB        *string        `json:"netbiosname_b,omitempty"`
	Netbiosalias        []interface{}  `json:"netbiosalias,omitempty"`
	Enable              *bool          `json:"enable,omitempty"`
}

// NewActivedirectoryUpdate0 instantiates a new ActivedirectoryUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivedirectoryUpdate0() *ActivedirectoryUpdate0 {
	this := ActivedirectoryUpdate0{}
	return &this
}

// NewActivedirectoryUpdate0WithDefaults instantiates a new ActivedirectoryUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivedirectoryUpdate0WithDefaults() *ActivedirectoryUpdate0 {
	this := ActivedirectoryUpdate0{}
	return &this
}

// GetDomainname returns the Domainname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDomainname() string {
	if o == nil || o.Domainname == nil {
		var ret string
		return ret
	}
	return *o.Domainname
}

// GetDomainnameOk returns a tuple with the Domainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDomainnameOk() (*string, bool) {
	if o == nil || o.Domainname == nil {
		return nil, false
	}
	return o.Domainname, true
}

// HasDomainname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDomainname() bool {
	if o != nil && o.Domainname != nil {
		return true
	}

	return false
}

// SetDomainname gets a reference to the given string and assigns it to the Domainname field.
func (o *ActivedirectoryUpdate0) SetDomainname(v string) {
	o.Domainname = &v
}

// GetBindname returns the Bindname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetBindname() string {
	if o == nil || o.Bindname == nil {
		var ret string
		return ret
	}
	return *o.Bindname
}

// GetBindnameOk returns a tuple with the Bindname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetBindnameOk() (*string, bool) {
	if o == nil || o.Bindname == nil {
		return nil, false
	}
	return o.Bindname, true
}

// HasBindname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasBindname() bool {
	if o != nil && o.Bindname != nil {
		return true
	}

	return false
}

// SetBindname gets a reference to the given string and assigns it to the Bindname field.
func (o *ActivedirectoryUpdate0) SetBindname(v string) {
	o.Bindname = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetBindpw() string {
	if o == nil || o.Bindpw == nil {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetBindpwOk() (*string, bool) {
	if o == nil || o.Bindpw == nil {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasBindpw() bool {
	if o != nil && o.Bindpw != nil {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *ActivedirectoryUpdate0) SetBindpw(v string) {
	o.Bindpw = &v
}

// GetVerboseLogging returns the VerboseLogging field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetVerboseLogging() bool {
	if o == nil || o.VerboseLogging == nil {
		var ret bool
		return ret
	}
	return *o.VerboseLogging
}

// GetVerboseLoggingOk returns a tuple with the VerboseLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetVerboseLoggingOk() (*bool, bool) {
	if o == nil || o.VerboseLogging == nil {
		return nil, false
	}
	return o.VerboseLogging, true
}

// HasVerboseLogging returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasVerboseLogging() bool {
	if o != nil && o.VerboseLogging != nil {
		return true
	}

	return false
}

// SetVerboseLogging gets a reference to the given bool and assigns it to the VerboseLogging field.
func (o *ActivedirectoryUpdate0) SetVerboseLogging(v bool) {
	o.VerboseLogging = &v
}

// GetUseDefaultDomain returns the UseDefaultDomain field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetUseDefaultDomain() bool {
	if o == nil || o.UseDefaultDomain == nil {
		var ret bool
		return ret
	}
	return *o.UseDefaultDomain
}

// GetUseDefaultDomainOk returns a tuple with the UseDefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetUseDefaultDomainOk() (*bool, bool) {
	if o == nil || o.UseDefaultDomain == nil {
		return nil, false
	}
	return o.UseDefaultDomain, true
}

// HasUseDefaultDomain returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasUseDefaultDomain() bool {
	if o != nil && o.UseDefaultDomain != nil {
		return true
	}

	return false
}

// SetUseDefaultDomain gets a reference to the given bool and assigns it to the UseDefaultDomain field.
func (o *ActivedirectoryUpdate0) SetUseDefaultDomain(v bool) {
	o.UseDefaultDomain = &v
}

// GetAllowTrustedDoms returns the AllowTrustedDoms field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetAllowTrustedDoms() bool {
	if o == nil || o.AllowTrustedDoms == nil {
		var ret bool
		return ret
	}
	return *o.AllowTrustedDoms
}

// GetAllowTrustedDomsOk returns a tuple with the AllowTrustedDoms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetAllowTrustedDomsOk() (*bool, bool) {
	if o == nil || o.AllowTrustedDoms == nil {
		return nil, false
	}
	return o.AllowTrustedDoms, true
}

// HasAllowTrustedDoms returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasAllowTrustedDoms() bool {
	if o != nil && o.AllowTrustedDoms != nil {
		return true
	}

	return false
}

// SetAllowTrustedDoms gets a reference to the given bool and assigns it to the AllowTrustedDoms field.
func (o *ActivedirectoryUpdate0) SetAllowTrustedDoms(v bool) {
	o.AllowTrustedDoms = &v
}

// GetAllowDnsUpdates returns the AllowDnsUpdates field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetAllowDnsUpdates() bool {
	if o == nil || o.AllowDnsUpdates == nil {
		var ret bool
		return ret
	}
	return *o.AllowDnsUpdates
}

// GetAllowDnsUpdatesOk returns a tuple with the AllowDnsUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetAllowDnsUpdatesOk() (*bool, bool) {
	if o == nil || o.AllowDnsUpdates == nil {
		return nil, false
	}
	return o.AllowDnsUpdates, true
}

// HasAllowDnsUpdates returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasAllowDnsUpdates() bool {
	if o != nil && o.AllowDnsUpdates != nil {
		return true
	}

	return false
}

// SetAllowDnsUpdates gets a reference to the given bool and assigns it to the AllowDnsUpdates field.
func (o *ActivedirectoryUpdate0) SetAllowDnsUpdates(v bool) {
	o.AllowDnsUpdates = &v
}

// GetDisableFreenasCache returns the DisableFreenasCache field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDisableFreenasCache() bool {
	if o == nil || o.DisableFreenasCache == nil {
		var ret bool
		return ret
	}
	return *o.DisableFreenasCache
}

// GetDisableFreenasCacheOk returns a tuple with the DisableFreenasCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDisableFreenasCacheOk() (*bool, bool) {
	if o == nil || o.DisableFreenasCache == nil {
		return nil, false
	}
	return o.DisableFreenasCache, true
}

// HasDisableFreenasCache returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDisableFreenasCache() bool {
	if o != nil && o.DisableFreenasCache != nil {
		return true
	}

	return false
}

// SetDisableFreenasCache gets a reference to the given bool and assigns it to the DisableFreenasCache field.
func (o *ActivedirectoryUpdate0) SetDisableFreenasCache(v bool) {
	o.DisableFreenasCache = &v
}

// GetRestrictPam returns the RestrictPam field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetRestrictPam() bool {
	if o == nil || o.RestrictPam == nil {
		var ret bool
		return ret
	}
	return *o.RestrictPam
}

// GetRestrictPamOk returns a tuple with the RestrictPam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetRestrictPamOk() (*bool, bool) {
	if o == nil || o.RestrictPam == nil {
		return nil, false
	}
	return o.RestrictPam, true
}

// HasRestrictPam returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasRestrictPam() bool {
	if o != nil && o.RestrictPam != nil {
		return true
	}

	return false
}

// SetRestrictPam gets a reference to the given bool and assigns it to the RestrictPam field.
func (o *ActivedirectoryUpdate0) SetRestrictPam(v bool) {
	o.RestrictPam = &v
}

// GetSite returns the Site field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetSite() string {
	if o == nil || o.Site.Get() == nil {
		var ret string
		return ret
	}
	return *o.Site.Get()
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Site.Get(), o.Site.IsSet()
}

// HasSite returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasSite() bool {
	if o != nil && o.Site.IsSet() {
		return true
	}

	return false
}

// SetSite gets a reference to the given NullableString and assigns it to the Site field.
func (o *ActivedirectoryUpdate0) SetSite(v string) {
	o.Site.Set(&v)
}

// SetSiteNil sets the value for Site to be an explicit nil
func (o *ActivedirectoryUpdate0) SetSiteNil() {
	o.Site.Set(nil)
}

// UnsetSite ensures that no value is present for Site, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetSite() {
	o.Site.Unset()
}

// GetKerberosRealm returns the KerberosRealm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetKerberosRealm() int32 {
	if o == nil || o.KerberosRealm.Get() == nil {
		var ret int32
		return ret
	}
	return *o.KerberosRealm.Get()
}

// GetKerberosRealmOk returns a tuple with the KerberosRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetKerberosRealmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosRealm.Get(), o.KerberosRealm.IsSet()
}

// HasKerberosRealm returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasKerberosRealm() bool {
	if o != nil && o.KerberosRealm.IsSet() {
		return true
	}

	return false
}

// SetKerberosRealm gets a reference to the given NullableInt32 and assigns it to the KerberosRealm field.
func (o *ActivedirectoryUpdate0) SetKerberosRealm(v int32) {
	o.KerberosRealm.Set(&v)
}

// SetKerberosRealmNil sets the value for KerberosRealm to be an explicit nil
func (o *ActivedirectoryUpdate0) SetKerberosRealmNil() {
	o.KerberosRealm.Set(nil)
}

// UnsetKerberosRealm ensures that no value is present for KerberosRealm, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetKerberosRealm() {
	o.KerberosRealm.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal.Get() == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *ActivedirectoryUpdate0) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}

// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *ActivedirectoryUpdate0) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *ActivedirectoryUpdate0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetDnsTimeout returns the DnsTimeout field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDnsTimeout() int32 {
	if o == nil || o.DnsTimeout == nil {
		var ret int32
		return ret
	}
	return *o.DnsTimeout
}

// GetDnsTimeoutOk returns a tuple with the DnsTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDnsTimeoutOk() (*int32, bool) {
	if o == nil || o.DnsTimeout == nil {
		return nil, false
	}
	return o.DnsTimeout, true
}

// HasDnsTimeout returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDnsTimeout() bool {
	if o != nil && o.DnsTimeout != nil {
		return true
	}

	return false
}

// SetDnsTimeout gets a reference to the given int32 and assigns it to the DnsTimeout field.
func (o *ActivedirectoryUpdate0) SetDnsTimeout(v int32) {
	o.DnsTimeout = &v
}

// GetNssInfo returns the NssInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetNssInfo() string {
	if o == nil || o.NssInfo.Get() == nil {
		var ret string
		return ret
	}
	return *o.NssInfo.Get()
}

// GetNssInfoOk returns a tuple with the NssInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetNssInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NssInfo.Get(), o.NssInfo.IsSet()
}

// HasNssInfo returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNssInfo() bool {
	if o != nil && o.NssInfo.IsSet() {
		return true
	}

	return false
}

// SetNssInfo gets a reference to the given NullableString and assigns it to the NssInfo field.
func (o *ActivedirectoryUpdate0) SetNssInfo(v string) {
	o.NssInfo.Set(&v)
}

// SetNssInfoNil sets the value for NssInfo to be an explicit nil
func (o *ActivedirectoryUpdate0) SetNssInfoNil() {
	o.NssInfo.Set(nil)
}

// UnsetNssInfo ensures that no value is present for NssInfo, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetNssInfo() {
	o.NssInfo.Unset()
}

// GetCreatecomputer returns the Createcomputer field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetCreatecomputer() string {
	if o == nil || o.Createcomputer == nil {
		var ret string
		return ret
	}
	return *o.Createcomputer
}

// GetCreatecomputerOk returns a tuple with the Createcomputer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetCreatecomputerOk() (*string, bool) {
	if o == nil || o.Createcomputer == nil {
		return nil, false
	}
	return o.Createcomputer, true
}

// HasCreatecomputer returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasCreatecomputer() bool {
	if o != nil && o.Createcomputer != nil {
		return true
	}

	return false
}

// SetCreatecomputer gets a reference to the given string and assigns it to the Createcomputer field.
func (o *ActivedirectoryUpdate0) SetCreatecomputer(v string) {
	o.Createcomputer = &v
}

// GetNetbiosname returns the Netbiosname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosname() string {
	if o == nil || o.Netbiosname == nil {
		var ret string
		return ret
	}
	return *o.Netbiosname
}

// GetNetbiosnameOk returns a tuple with the Netbiosname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosnameOk() (*string, bool) {
	if o == nil || o.Netbiosname == nil {
		return nil, false
	}
	return o.Netbiosname, true
}

// HasNetbiosname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosname() bool {
	if o != nil && o.Netbiosname != nil {
		return true
	}

	return false
}

// SetNetbiosname gets a reference to the given string and assigns it to the Netbiosname field.
func (o *ActivedirectoryUpdate0) SetNetbiosname(v string) {
	o.Netbiosname = &v
}

// GetNetbiosnameB returns the NetbiosnameB field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosnameB() string {
	if o == nil || o.NetbiosnameB == nil {
		var ret string
		return ret
	}
	return *o.NetbiosnameB
}

// GetNetbiosnameBOk returns a tuple with the NetbiosnameB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosnameBOk() (*string, bool) {
	if o == nil || o.NetbiosnameB == nil {
		return nil, false
	}
	return o.NetbiosnameB, true
}

// HasNetbiosnameB returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosnameB() bool {
	if o != nil && o.NetbiosnameB != nil {
		return true
	}

	return false
}

// SetNetbiosnameB gets a reference to the given string and assigns it to the NetbiosnameB field.
func (o *ActivedirectoryUpdate0) SetNetbiosnameB(v string) {
	o.NetbiosnameB = &v
}

// GetNetbiosalias returns the Netbiosalias field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosalias() []interface{} {
	if o == nil || o.Netbiosalias == nil {
		var ret []interface{}
		return ret
	}
	return o.Netbiosalias
}

// GetNetbiosaliasOk returns a tuple with the Netbiosalias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosaliasOk() ([]interface{}, bool) {
	if o == nil || o.Netbiosalias == nil {
		return nil, false
	}
	return o.Netbiosalias, true
}

// HasNetbiosalias returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosalias() bool {
	if o != nil && o.Netbiosalias != nil {
		return true
	}

	return false
}

// SetNetbiosalias gets a reference to the given []interface{} and assigns it to the Netbiosalias field.
func (o *ActivedirectoryUpdate0) SetNetbiosalias(v []interface{}) {
	o.Netbiosalias = v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ActivedirectoryUpdate0) SetEnable(v bool) {
	o.Enable = &v
}

func (o ActivedirectoryUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domainname != nil {
		toSerialize["domainname"] = o.Domainname
	}
	if o.Bindname != nil {
		toSerialize["bindname"] = o.Bindname
	}
	if o.Bindpw != nil {
		toSerialize["bindpw"] = o.Bindpw
	}
	if o.VerboseLogging != nil {
		toSerialize["verbose_logging"] = o.VerboseLogging
	}
	if o.UseDefaultDomain != nil {
		toSerialize["use_default_domain"] = o.UseDefaultDomain
	}
	if o.AllowTrustedDoms != nil {
		toSerialize["allow_trusted_doms"] = o.AllowTrustedDoms
	}
	if o.AllowDnsUpdates != nil {
		toSerialize["allow_dns_updates"] = o.AllowDnsUpdates
	}
	if o.DisableFreenasCache != nil {
		toSerialize["disable_freenas_cache"] = o.DisableFreenasCache
	}
	if o.RestrictPam != nil {
		toSerialize["restrict_pam"] = o.RestrictPam
	}
	if o.Site.IsSet() {
		toSerialize["site"] = o.Site.Get()
	}
	if o.KerberosRealm.IsSet() {
		toSerialize["kerberos_realm"] = o.KerberosRealm.Get()
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberos_principal"] = o.KerberosPrincipal.Get()
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.DnsTimeout != nil {
		toSerialize["dns_timeout"] = o.DnsTimeout
	}
	if o.NssInfo.IsSet() {
		toSerialize["nss_info"] = o.NssInfo.Get()
	}
	if o.Createcomputer != nil {
		toSerialize["createcomputer"] = o.Createcomputer
	}
	if o.Netbiosname != nil {
		toSerialize["netbiosname"] = o.Netbiosname
	}
	if o.NetbiosnameB != nil {
		toSerialize["netbiosname_b"] = o.NetbiosnameB
	}
	if o.Netbiosalias != nil {
		toSerialize["netbiosalias"] = o.Netbiosalias
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	return json.Marshal(toSerialize)
}

type NullableActivedirectoryUpdate0 struct {
	value *ActivedirectoryUpdate0
	isSet bool
}

func (v NullableActivedirectoryUpdate0) Get() *ActivedirectoryUpdate0 {
	return v.value
}

func (v *NullableActivedirectoryUpdate0) Set(val *ActivedirectoryUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableActivedirectoryUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableActivedirectoryUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivedirectoryUpdate0(val *ActivedirectoryUpdate0) *NullableActivedirectoryUpdate0 {
	return &NullableActivedirectoryUpdate0{value: val, isSet: true}
}

func (v NullableActivedirectoryUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivedirectoryUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

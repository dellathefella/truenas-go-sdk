/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// RsyncmodUpdate1 struct for RsyncmodUpdate1
type RsyncmodUpdate1 struct {
	Enabled    *bool    `json:"enabled,omitempty"`
	Name       *string  `json:"name,omitempty"`
	Comment    *string  `json:"comment,omitempty"`
	Path       *string  `json:"path,omitempty"`
	Mode       *string  `json:"mode,omitempty"`
	Maxconn    *int32   `json:"maxconn,omitempty"`
	User       *string  `json:"user,omitempty"`
	Group      *string  `json:"group,omitempty"`
	Hostsallow []string `json:"hostsallow,omitempty"`
	Hostsdeny  []string `json:"hostsdeny,omitempty"`
	Auxiliary  *string  `json:"auxiliary,omitempty"`
}

// NewRsyncmodUpdate1 instantiates a new RsyncmodUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRsyncmodUpdate1() *RsyncmodUpdate1 {
	this := RsyncmodUpdate1{}
	return &this
}

// NewRsyncmodUpdate1WithDefaults instantiates a new RsyncmodUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRsyncmodUpdate1WithDefaults() *RsyncmodUpdate1 {
	this := RsyncmodUpdate1{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RsyncmodUpdate1) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RsyncmodUpdate1) SetName(v string) {
	o.Name = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RsyncmodUpdate1) SetComment(v string) {
	o.Comment = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RsyncmodUpdate1) SetPath(v string) {
	o.Path = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *RsyncmodUpdate1) SetMode(v string) {
	o.Mode = &v
}

// GetMaxconn returns the Maxconn field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetMaxconn() int32 {
	if o == nil || o.Maxconn == nil {
		var ret int32
		return ret
	}
	return *o.Maxconn
}

// GetMaxconnOk returns a tuple with the Maxconn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetMaxconnOk() (*int32, bool) {
	if o == nil || o.Maxconn == nil {
		return nil, false
	}
	return o.Maxconn, true
}

// HasMaxconn returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasMaxconn() bool {
	if o != nil && o.Maxconn != nil {
		return true
	}

	return false
}

// SetMaxconn gets a reference to the given int32 and assigns it to the Maxconn field.
func (o *RsyncmodUpdate1) SetMaxconn(v int32) {
	o.Maxconn = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RsyncmodUpdate1) SetUser(v string) {
	o.User = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *RsyncmodUpdate1) SetGroup(v string) {
	o.Group = &v
}

// GetHostsallow returns the Hostsallow field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetHostsallow() []string {
	if o == nil || o.Hostsallow == nil {
		var ret []string
		return ret
	}
	return o.Hostsallow
}

// GetHostsallowOk returns a tuple with the Hostsallow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetHostsallowOk() ([]string, bool) {
	if o == nil || o.Hostsallow == nil {
		return nil, false
	}
	return o.Hostsallow, true
}

// HasHostsallow returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasHostsallow() bool {
	if o != nil && o.Hostsallow != nil {
		return true
	}

	return false
}

// SetHostsallow gets a reference to the given []string and assigns it to the Hostsallow field.
func (o *RsyncmodUpdate1) SetHostsallow(v []string) {
	o.Hostsallow = v
}

// GetHostsdeny returns the Hostsdeny field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetHostsdeny() []string {
	if o == nil || o.Hostsdeny == nil {
		var ret []string
		return ret
	}
	return o.Hostsdeny
}

// GetHostsdenyOk returns a tuple with the Hostsdeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetHostsdenyOk() ([]string, bool) {
	if o == nil || o.Hostsdeny == nil {
		return nil, false
	}
	return o.Hostsdeny, true
}

// HasHostsdeny returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasHostsdeny() bool {
	if o != nil && o.Hostsdeny != nil {
		return true
	}

	return false
}

// SetHostsdeny gets a reference to the given []string and assigns it to the Hostsdeny field.
func (o *RsyncmodUpdate1) SetHostsdeny(v []string) {
	o.Hostsdeny = v
}

// GetAuxiliary returns the Auxiliary field value if set, zero value otherwise.
func (o *RsyncmodUpdate1) GetAuxiliary() string {
	if o == nil || o.Auxiliary == nil {
		var ret string
		return ret
	}
	return *o.Auxiliary
}

// GetAuxiliaryOk returns a tuple with the Auxiliary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodUpdate1) GetAuxiliaryOk() (*string, bool) {
	if o == nil || o.Auxiliary == nil {
		return nil, false
	}
	return o.Auxiliary, true
}

// HasAuxiliary returns a boolean if a field has been set.
func (o *RsyncmodUpdate1) HasAuxiliary() bool {
	if o != nil && o.Auxiliary != nil {
		return true
	}

	return false
}

// SetAuxiliary gets a reference to the given string and assigns it to the Auxiliary field.
func (o *RsyncmodUpdate1) SetAuxiliary(v string) {
	o.Auxiliary = &v
}

func (o RsyncmodUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Maxconn != nil {
		toSerialize["maxconn"] = o.Maxconn
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Hostsallow != nil {
		toSerialize["hostsallow"] = o.Hostsallow
	}
	if o.Hostsdeny != nil {
		toSerialize["hostsdeny"] = o.Hostsdeny
	}
	if o.Auxiliary != nil {
		toSerialize["auxiliary"] = o.Auxiliary
	}
	return json.Marshal(toSerialize)
}

type NullableRsyncmodUpdate1 struct {
	value *RsyncmodUpdate1
	isSet bool
}

func (v NullableRsyncmodUpdate1) Get() *RsyncmodUpdate1 {
	return v.value
}

func (v *NullableRsyncmodUpdate1) Set(val *RsyncmodUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableRsyncmodUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableRsyncmodUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRsyncmodUpdate1(val *RsyncmodUpdate1) *NullableRsyncmodUpdate1 {
	return &NullableRsyncmodUpdate1{value: val, isSet: true}
}

func (v NullableRsyncmodUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRsyncmodUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

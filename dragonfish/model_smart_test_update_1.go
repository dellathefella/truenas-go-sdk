/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// SmartTestUpdate1 struct for SmartTestUpdate1
type SmartTestUpdate1 struct {
	Schedule *SmartTestCreate0Schedule `json:"schedule,omitempty"`
	Desc     *string                   `json:"desc,omitempty"`
	AllDisks *bool                     `json:"all_disks,omitempty"`
	Disks    []string                  `json:"disks,omitempty"`
	Type     *string                   `json:"type,omitempty"`
}

// NewSmartTestUpdate1 instantiates a new SmartTestUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartTestUpdate1() *SmartTestUpdate1 {
	this := SmartTestUpdate1{}
	return &this
}

// NewSmartTestUpdate1WithDefaults instantiates a new SmartTestUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartTestUpdate1WithDefaults() *SmartTestUpdate1 {
	this := SmartTestUpdate1{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *SmartTestUpdate1) GetSchedule() SmartTestCreate0Schedule {
	if o == nil || o.Schedule == nil {
		var ret SmartTestCreate0Schedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestUpdate1) GetScheduleOk() (*SmartTestCreate0Schedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *SmartTestUpdate1) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given SmartTestCreate0Schedule and assigns it to the Schedule field.
func (o *SmartTestUpdate1) SetSchedule(v SmartTestCreate0Schedule) {
	o.Schedule = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *SmartTestUpdate1) GetDesc() string {
	if o == nil || o.Desc == nil {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestUpdate1) GetDescOk() (*string, bool) {
	if o == nil || o.Desc == nil {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *SmartTestUpdate1) HasDesc() bool {
	if o != nil && o.Desc != nil {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *SmartTestUpdate1) SetDesc(v string) {
	o.Desc = &v
}

// GetAllDisks returns the AllDisks field value if set, zero value otherwise.
func (o *SmartTestUpdate1) GetAllDisks() bool {
	if o == nil || o.AllDisks == nil {
		var ret bool
		return ret
	}
	return *o.AllDisks
}

// GetAllDisksOk returns a tuple with the AllDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestUpdate1) GetAllDisksOk() (*bool, bool) {
	if o == nil || o.AllDisks == nil {
		return nil, false
	}
	return o.AllDisks, true
}

// HasAllDisks returns a boolean if a field has been set.
func (o *SmartTestUpdate1) HasAllDisks() bool {
	if o != nil && o.AllDisks != nil {
		return true
	}

	return false
}

// SetAllDisks gets a reference to the given bool and assigns it to the AllDisks field.
func (o *SmartTestUpdate1) SetAllDisks(v bool) {
	o.AllDisks = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *SmartTestUpdate1) GetDisks() []string {
	if o == nil || o.Disks == nil {
		var ret []string
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestUpdate1) GetDisksOk() ([]string, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *SmartTestUpdate1) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []string and assigns it to the Disks field.
func (o *SmartTestUpdate1) SetDisks(v []string) {
	o.Disks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SmartTestUpdate1) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestUpdate1) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SmartTestUpdate1) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SmartTestUpdate1) SetType(v string) {
	o.Type = &v
}

func (o SmartTestUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.Desc != nil {
		toSerialize["desc"] = o.Desc
	}
	if o.AllDisks != nil {
		toSerialize["all_disks"] = o.AllDisks
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSmartTestUpdate1 struct {
	value *SmartTestUpdate1
	isSet bool
}

func (v NullableSmartTestUpdate1) Get() *SmartTestUpdate1 {
	return v.value
}

func (v *NullableSmartTestUpdate1) Set(val *SmartTestUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartTestUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartTestUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartTestUpdate1(val *SmartTestUpdate1) *NullableSmartTestUpdate1 {
	return &NullableSmartTestUpdate1{value: val, isSet: true}
}

func (v NullableSmartTestUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartTestUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

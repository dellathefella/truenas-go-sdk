/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// DiskTemperature1 the model 'DiskTemperature1'
type DiskTemperature1 string

// List of disk_temperature_1
const (
	NEVER   DiskTemperature1 = "NEVER"
	SLEEP   DiskTemperature1 = "SLEEP"
	STANDBY DiskTemperature1 = "STANDBY"
	IDLE    DiskTemperature1 = "IDLE"
)

// All allowed values of DiskTemperature1 enum
var AllowedDiskTemperature1EnumValues = []DiskTemperature1{
	"NEVER",
	"SLEEP",
	"STANDBY",
	"IDLE",
}

func (v *DiskTemperature1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskTemperature1(value)
	for _, existing := range AllowedDiskTemperature1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskTemperature1", value)
}

// NewDiskTemperature1FromValue returns a pointer to a valid DiskTemperature1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskTemperature1FromValue(v string) (*DiskTemperature1, error) {
	ev := DiskTemperature1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskTemperature1: valid values are %v", v, AllowedDiskTemperature1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskTemperature1) IsValid() bool {
	for _, existing := range AllowedDiskTemperature1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to disk_temperature_1 value
func (v DiskTemperature1) Ptr() *DiskTemperature1 {
	return &v
}

type NullableDiskTemperature1 struct {
	value *DiskTemperature1
	isSet bool
}

func (v NullableDiskTemperature1) Get() *DiskTemperature1 {
	return v.value
}

func (v *NullableDiskTemperature1) Set(val *DiskTemperature1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTemperature1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTemperature1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTemperature1(val *DiskTemperature1) *NullableDiskTemperature1 {
	return &NullableDiskTemperature1{value: val, isSet: true}
}

func (v NullableDiskTemperature1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTemperature1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

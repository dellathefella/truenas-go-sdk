/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
	"fmt"
)

// JailClean0 the model 'JailClean0'
type JailClean0 string

// List of jail_clean_0
const (
	ALL      JailClean0 = "ALL"
	JAIL     JailClean0 = "JAIL"
	TEMPLATE JailClean0 = "TEMPLATE"
	RELEASE  JailClean0 = "RELEASE"
)

// All allowed values of JailClean0 enum
var AllowedJailClean0EnumValues = []JailClean0{
	"ALL",
	"JAIL",
	"TEMPLATE",
	"RELEASE",
}

func (v *JailClean0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JailClean0(value)
	for _, existing := range AllowedJailClean0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JailClean0", value)
}

// NewJailClean0FromValue returns a pointer to a valid JailClean0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJailClean0FromValue(v string) (*JailClean0, error) {
	ev := JailClean0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JailClean0: valid values are %v", v, AllowedJailClean0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JailClean0) IsValid() bool {
	for _, existing := range AllowedJailClean0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to jail_clean_0 value
func (v JailClean0) Ptr() *JailClean0 {
	return &v
}

type NullableJailClean0 struct {
	value *JailClean0
	isSet bool
}

func (v NullableJailClean0) Get() *JailClean0 {
	return v.value
}

func (v *NullableJailClean0) Set(val *JailClean0) {
	v.value = val
	v.isSet = true
}

func (v NullableJailClean0) IsSet() bool {
	return v.isSet
}

func (v *NullableJailClean0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailClean0(val *JailClean0) *NullableJailClean0 {
	return &NullableJailClean0{value: val, isSet: true}
}

func (v NullableJailClean0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailClean0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

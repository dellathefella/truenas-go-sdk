/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PoolDatasetDelete1 struct for PoolDatasetDelete1
type PoolDatasetDelete1 struct {
	Recursive *bool `json:"recursive,omitempty"`
	Force     *bool `json:"force,omitempty"`
}

// NewPoolDatasetDelete1 instantiates a new PoolDatasetDelete1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDatasetDelete1() *PoolDatasetDelete1 {
	this := PoolDatasetDelete1{}
	return &this
}

// NewPoolDatasetDelete1WithDefaults instantiates a new PoolDatasetDelete1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDatasetDelete1WithDefaults() *PoolDatasetDelete1 {
	this := PoolDatasetDelete1{}
	return &this
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *PoolDatasetDelete1) GetRecursive() bool {
	if o == nil || o.Recursive == nil {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetDelete1) GetRecursiveOk() (*bool, bool) {
	if o == nil || o.Recursive == nil {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *PoolDatasetDelete1) HasRecursive() bool {
	if o != nil && o.Recursive != nil {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *PoolDatasetDelete1) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *PoolDatasetDelete1) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetDelete1) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *PoolDatasetDelete1) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *PoolDatasetDelete1) SetForce(v bool) {
	o.Force = &v
}

func (o PoolDatasetDelete1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Recursive != nil {
		toSerialize["recursive"] = o.Recursive
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullablePoolDatasetDelete1 struct {
	value *PoolDatasetDelete1
	isSet bool
}

func (v NullablePoolDatasetDelete1) Get() *PoolDatasetDelete1 {
	return v.value
}

func (v *NullablePoolDatasetDelete1) Set(val *PoolDatasetDelete1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDatasetDelete1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDatasetDelete1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDatasetDelete1(val *PoolDatasetDelete1) *NullablePoolDatasetDelete1 {
	return &NullablePoolDatasetDelete1{value: val, isSet: true}
}

func (v NullablePoolDatasetDelete1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDatasetDelete1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

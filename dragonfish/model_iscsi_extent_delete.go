/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// IscsiExtentDelete struct for IscsiExtentDelete
type IscsiExtentDelete struct {
	Remove               *bool `json:"remove,omitempty"`
	Force                *bool `json:"force,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IscsiExtentDelete IscsiExtentDelete

// NewIscsiExtentDelete instantiates a new IscsiExtentDelete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIscsiExtentDelete() *IscsiExtentDelete {
	this := IscsiExtentDelete{}
	var remove bool = false
	this.Remove = &remove
	var force bool = false
	this.Force = &force
	return &this
}

// NewIscsiExtentDeleteWithDefaults instantiates a new IscsiExtentDelete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIscsiExtentDeleteWithDefaults() *IscsiExtentDelete {
	this := IscsiExtentDelete{}
	var remove bool = false
	this.Remove = &remove
	var force bool = false
	this.Force = &force
	return &this
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *IscsiExtentDelete) GetRemove() bool {
	if o == nil || o.Remove == nil {
		var ret bool
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiExtentDelete) GetRemoveOk() (*bool, bool) {
	if o == nil || o.Remove == nil {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *IscsiExtentDelete) HasRemove() bool {
	if o != nil && o.Remove != nil {
		return true
	}

	return false
}

// SetRemove gets a reference to the given bool and assigns it to the Remove field.
func (o *IscsiExtentDelete) SetRemove(v bool) {
	o.Remove = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *IscsiExtentDelete) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiExtentDelete) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *IscsiExtentDelete) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *IscsiExtentDelete) SetForce(v bool) {
	o.Force = &v
}

func (o IscsiExtentDelete) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Remove != nil {
		toSerialize["remove"] = o.Remove
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IscsiExtentDelete) UnmarshalJSON(bytes []byte) (err error) {
	varIscsiExtentDelete := _IscsiExtentDelete{}

	if err = json.Unmarshal(bytes, &varIscsiExtentDelete); err == nil {
		*o = IscsiExtentDelete(varIscsiExtentDelete)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "remove")
		delete(additionalProperties, "force")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIscsiExtentDelete struct {
	value *IscsiExtentDelete
	isSet bool
}

func (v NullableIscsiExtentDelete) Get() *IscsiExtentDelete {
	return v.value
}

func (v *NullableIscsiExtentDelete) Set(val *IscsiExtentDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableIscsiExtentDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableIscsiExtentDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIscsiExtentDelete(val *IscsiExtentDelete) *NullableIscsiExtentDelete {
	return &NullableIscsiExtentDelete{value: val, isSet: true}
}

func (v NullableIscsiExtentDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIscsiExtentDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

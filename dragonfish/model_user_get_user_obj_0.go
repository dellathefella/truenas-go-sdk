/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// UserGetUserObj0 struct for UserGetUserObj0
type UserGetUserObj0 struct {
	Username *string `json:"username,omitempty"`
	Uid      *int32  `json:"uid,omitempty"`
}

// NewUserGetUserObj0 instantiates a new UserGetUserObj0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetUserObj0() *UserGetUserObj0 {
	this := UserGetUserObj0{}
	return &this
}

// NewUserGetUserObj0WithDefaults instantiates a new UserGetUserObj0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetUserObj0WithDefaults() *UserGetUserObj0 {
	this := UserGetUserObj0{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserGetUserObj0) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetUserObj0) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserGetUserObj0) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserGetUserObj0) SetUsername(v string) {
	o.Username = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UserGetUserObj0) GetUid() int32 {
	if o == nil || o.Uid == nil {
		var ret int32
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetUserObj0) GetUidOk() (*int32, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UserGetUserObj0) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given int32 and assigns it to the Uid field.
func (o *UserGetUserObj0) SetUid(v int32) {
	o.Uid = &v
}

func (o UserGetUserObj0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableUserGetUserObj0 struct {
	value *UserGetUserObj0
	isSet bool
}

func (v NullableUserGetUserObj0) Get() *UserGetUserObj0 {
	return v.value
}

func (v *NullableUserGetUserObj0) Set(val *UserGetUserObj0) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetUserObj0) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetUserObj0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetUserObj0(val *UserGetUserObj0) *NullableUserGetUserObj0 {
	return &NullableUserGetUserObj0{value: val, isSet: true}
}

func (v NullableUserGetUserObj0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetUserObj0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

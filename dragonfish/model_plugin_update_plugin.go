/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// PluginUpdatePlugin struct for PluginUpdatePlugin
type PluginUpdatePlugin struct {
	Jail                 *string `json:"jail,omitempty"`
	UpdateJail           *bool   `json:"update_jail,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PluginUpdatePlugin PluginUpdatePlugin

// NewPluginUpdatePlugin instantiates a new PluginUpdatePlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginUpdatePlugin() *PluginUpdatePlugin {
	this := PluginUpdatePlugin{}
	var updateJail bool = true
	this.UpdateJail = &updateJail
	return &this
}

// NewPluginUpdatePluginWithDefaults instantiates a new PluginUpdatePlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginUpdatePluginWithDefaults() *PluginUpdatePlugin {
	this := PluginUpdatePlugin{}
	var updateJail bool = true
	this.UpdateJail = &updateJail
	return &this
}

// GetJail returns the Jail field value if set, zero value otherwise.
func (o *PluginUpdatePlugin) GetJail() string {
	if o == nil || o.Jail == nil {
		var ret string
		return ret
	}
	return *o.Jail
}

// GetJailOk returns a tuple with the Jail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUpdatePlugin) GetJailOk() (*string, bool) {
	if o == nil || o.Jail == nil {
		return nil, false
	}
	return o.Jail, true
}

// HasJail returns a boolean if a field has been set.
func (o *PluginUpdatePlugin) HasJail() bool {
	if o != nil && o.Jail != nil {
		return true
	}

	return false
}

// SetJail gets a reference to the given string and assigns it to the Jail field.
func (o *PluginUpdatePlugin) SetJail(v string) {
	o.Jail = &v
}

// GetUpdateJail returns the UpdateJail field value if set, zero value otherwise.
func (o *PluginUpdatePlugin) GetUpdateJail() bool {
	if o == nil || o.UpdateJail == nil {
		var ret bool
		return ret
	}
	return *o.UpdateJail
}

// GetUpdateJailOk returns a tuple with the UpdateJail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUpdatePlugin) GetUpdateJailOk() (*bool, bool) {
	if o == nil || o.UpdateJail == nil {
		return nil, false
	}
	return o.UpdateJail, true
}

// HasUpdateJail returns a boolean if a field has been set.
func (o *PluginUpdatePlugin) HasUpdateJail() bool {
	if o != nil && o.UpdateJail != nil {
		return true
	}

	return false
}

// SetUpdateJail gets a reference to the given bool and assigns it to the UpdateJail field.
func (o *PluginUpdatePlugin) SetUpdateJail(v bool) {
	o.UpdateJail = &v
}

func (o PluginUpdatePlugin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Jail != nil {
		toSerialize["jail"] = o.Jail
	}
	if o.UpdateJail != nil {
		toSerialize["update_jail"] = o.UpdateJail
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PluginUpdatePlugin) UnmarshalJSON(bytes []byte) (err error) {
	varPluginUpdatePlugin := _PluginUpdatePlugin{}

	if err = json.Unmarshal(bytes, &varPluginUpdatePlugin); err == nil {
		*o = PluginUpdatePlugin(varPluginUpdatePlugin)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "jail")
		delete(additionalProperties, "update_jail")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginUpdatePlugin struct {
	value *PluginUpdatePlugin
	isSet bool
}

func (v NullablePluginUpdatePlugin) Get() *PluginUpdatePlugin {
	return v.value
}

func (v *NullablePluginUpdatePlugin) Set(val *PluginUpdatePlugin) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginUpdatePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginUpdatePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginUpdatePlugin(val *PluginUpdatePlugin) *NullablePluginUpdatePlugin {
	return &NullablePluginUpdatePlugin{value: val, isSet: true}
}

func (v NullablePluginUpdatePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginUpdatePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

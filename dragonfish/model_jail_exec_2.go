/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// JailExec2 struct for JailExec2
type JailExec2 struct {
	HostUser *string `json:"host_user,omitempty"`
	JailUser *string `json:"jail_user,omitempty"`
}

// NewJailExec2 instantiates a new JailExec2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailExec2() *JailExec2 {
	this := JailExec2{}
	return &this
}

// NewJailExec2WithDefaults instantiates a new JailExec2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailExec2WithDefaults() *JailExec2 {
	this := JailExec2{}
	return &this
}

// GetHostUser returns the HostUser field value if set, zero value otherwise.
func (o *JailExec2) GetHostUser() string {
	if o == nil || o.HostUser == nil {
		var ret string
		return ret
	}
	return *o.HostUser
}

// GetHostUserOk returns a tuple with the HostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailExec2) GetHostUserOk() (*string, bool) {
	if o == nil || o.HostUser == nil {
		return nil, false
	}
	return o.HostUser, true
}

// HasHostUser returns a boolean if a field has been set.
func (o *JailExec2) HasHostUser() bool {
	if o != nil && o.HostUser != nil {
		return true
	}

	return false
}

// SetHostUser gets a reference to the given string and assigns it to the HostUser field.
func (o *JailExec2) SetHostUser(v string) {
	o.HostUser = &v
}

// GetJailUser returns the JailUser field value if set, zero value otherwise.
func (o *JailExec2) GetJailUser() string {
	if o == nil || o.JailUser == nil {
		var ret string
		return ret
	}
	return *o.JailUser
}

// GetJailUserOk returns a tuple with the JailUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailExec2) GetJailUserOk() (*string, bool) {
	if o == nil || o.JailUser == nil {
		return nil, false
	}
	return o.JailUser, true
}

// HasJailUser returns a boolean if a field has been set.
func (o *JailExec2) HasJailUser() bool {
	if o != nil && o.JailUser != nil {
		return true
	}

	return false
}

// SetJailUser gets a reference to the given string and assigns it to the JailUser field.
func (o *JailExec2) SetJailUser(v string) {
	o.JailUser = &v
}

func (o JailExec2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostUser != nil {
		toSerialize["host_user"] = o.HostUser
	}
	if o.JailUser != nil {
		toSerialize["jail_user"] = o.JailUser
	}
	return json.Marshal(toSerialize)
}

type NullableJailExec2 struct {
	value *JailExec2
	isSet bool
}

func (v NullableJailExec2) Get() *JailExec2 {
	return v.value
}

func (v *NullableJailExec2) Set(val *JailExec2) {
	v.value = val
	v.isSet = true
}

func (v NullableJailExec2) IsSet() bool {
	return v.isSet
}

func (v *NullableJailExec2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailExec2(val *JailExec2) *NullableJailExec2 {
	return &NullableJailExec2{value: val, isSet: true}
}

func (v NullableJailExec2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailExec2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dragonfish

import (
	"encoding/json"
)

// FcportUpdate1 struct for FcportUpdate1
type FcportUpdate1 struct {
	Mode   *string       `json:"mode,omitempty"`
	Target NullableInt32 `json:"target,omitempty"`
}

// NewFcportUpdate1 instantiates a new FcportUpdate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcportUpdate1() *FcportUpdate1 {
	this := FcportUpdate1{}
	return &this
}

// NewFcportUpdate1WithDefaults instantiates a new FcportUpdate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcportUpdate1WithDefaults() *FcportUpdate1 {
	this := FcportUpdate1{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *FcportUpdate1) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcportUpdate1) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *FcportUpdate1) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *FcportUpdate1) SetMode(v string) {
	o.Mode = &v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcportUpdate1) GetTarget() int32 {
	if o == nil || o.Target.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcportUpdate1) GetTargetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *FcportUpdate1) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableInt32 and assigns it to the Target field.
func (o *FcportUpdate1) SetTarget(v int32) {
	o.Target.Set(&v)
}

// SetTargetNil sets the value for Target to be an explicit nil
func (o *FcportUpdate1) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *FcportUpdate1) UnsetTarget() {
	o.Target.Unset()
}

func (o FcportUpdate1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFcportUpdate1 struct {
	value *FcportUpdate1
	isSet bool
}

func (v NullableFcportUpdate1) Get() *FcportUpdate1 {
	return v.value
}

func (v *NullableFcportUpdate1) Set(val *FcportUpdate1) {
	v.value = val
	v.isSet = true
}

func (v NullableFcportUpdate1) IsSet() bool {
	return v.isSet
}

func (v *NullableFcportUpdate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcportUpdate1(val *FcportUpdate1) *NullableFcportUpdate1 {
	return &NullableFcportUpdate1{value: val, isSet: true}
}

func (v NullableFcportUpdate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcportUpdate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
